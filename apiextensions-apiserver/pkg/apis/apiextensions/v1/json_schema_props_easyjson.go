// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson51a8e721DecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1(in *jlexer.Lexer, out *JSONSchemaProps) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "$ref":
			out.DollarRef = string(in.String())
		case "$schema":
			out.DollarSchema = string(in.String())
		case "additionalItems":
			if m, ok := out.AdditionalItems.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.AdditionalItems.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.AdditionalItems = in.Interface()
			}
		case "additionalProperties":
			if m, ok := out.AdditionalProperties.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.AdditionalProperties.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.AdditionalProperties = in.Interface()
			}
		case "allOf":
			if in.IsNull() {
				in.Skip()
				out.AllOf = nil
			} else {
				in.Delim('[')
				if out.AllOf == nil {
					if !in.IsDelim(']') {
						out.AllOf = make([]*JSONSchemaProps, 0, 8)
					} else {
						out.AllOf = []*JSONSchemaProps{}
					}
				} else {
					out.AllOf = (out.AllOf)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *JSONSchemaProps
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(JSONSchemaProps)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.AllOf = append(out.AllOf, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "anyOf":
			if in.IsNull() {
				in.Skip()
				out.AnyOf = nil
			} else {
				in.Delim('[')
				if out.AnyOf == nil {
					if !in.IsDelim(']') {
						out.AnyOf = make([]*JSONSchemaProps, 0, 8)
					} else {
						out.AnyOf = []*JSONSchemaProps{}
					}
				} else {
					out.AnyOf = (out.AnyOf)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *JSONSchemaProps
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(JSONSchemaProps)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					out.AnyOf = append(out.AnyOf, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "default":
			if m, ok := out.Default.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Default.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Default = in.Interface()
			}
		case "definitions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Definitions = make(map[string]JSONSchemaProps)
				} else {
					out.Definitions = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 JSONSchemaProps
					(v3).UnmarshalEasyJSON(in)
					(out.Definitions)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "dependencies":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Dependencies = make(map[string]JSONSchemaPropsOrStringArray)
				} else {
					out.Dependencies = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 JSONSchemaPropsOrStringArray
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					(out.Dependencies)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "description":
			out.Description = string(in.String())
		case "enum":
			if in.IsNull() {
				in.Skip()
				out.Enum = nil
			} else {
				in.Delim('[')
				if out.Enum == nil {
					if !in.IsDelim(']') {
						out.Enum = make([]JSON, 0, 4)
					} else {
						out.Enum = []JSON{}
					}
				} else {
					out.Enum = (out.Enum)[:0]
				}
				for !in.IsDelim(']') {
					var v5 JSON
					if m, ok := v5.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v5.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v5 = in.Interface()
					}
					out.Enum = append(out.Enum, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "example":
			if m, ok := out.Example.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Example.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Example = in.Interface()
			}
		case "exclusiveMaximum":
			out.ExclusiveMaximum = bool(in.Bool())
		case "exclusiveMinimum":
			out.ExclusiveMinimum = bool(in.Bool())
		case "externalDocs":
			if in.IsNull() {
				in.Skip()
				out.ExternalDocs = nil
			} else {
				if out.ExternalDocs == nil {
					out.ExternalDocs = new(ExternalDocumentation)
				}
				(*out.ExternalDocs).UnmarshalEasyJSON(in)
			}
		case "format":
			out.Format = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "items":
			if m, ok := out.Items.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Items.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Items = in.Interface()
			}
		case "maxItems":
			out.MaxItems = int64(in.Int64())
		case "maxLength":
			out.MaxLength = int64(in.Int64())
		case "maxProperties":
			out.MaxProperties = int64(in.Int64())
		case "maximum":
			out.Maximum = float64(in.Float64())
		case "minItems":
			out.MinItems = int64(in.Int64())
		case "minLength":
			out.MinLength = int64(in.Int64())
		case "minProperties":
			out.MinProperties = int64(in.Int64())
		case "minimum":
			out.Minimum = float64(in.Float64())
		case "multipleOf":
			out.MultipleOf = float64(in.Float64())
		case "not":
			if in.IsNull() {
				in.Skip()
				out.Not = nil
			} else {
				if out.Not == nil {
					out.Not = new(JSONSchemaProps)
				}
				(*out.Not).UnmarshalEasyJSON(in)
			}
		case "nullable":
			out.Nullable = bool(in.Bool())
		case "oneOf":
			if in.IsNull() {
				in.Skip()
				out.OneOf = nil
			} else {
				in.Delim('[')
				if out.OneOf == nil {
					if !in.IsDelim(']') {
						out.OneOf = make([]*JSONSchemaProps, 0, 8)
					} else {
						out.OneOf = []*JSONSchemaProps{}
					}
				} else {
					out.OneOf = (out.OneOf)[:0]
				}
				for !in.IsDelim(']') {
					var v6 *JSONSchemaProps
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						if v6 == nil {
							v6 = new(JSONSchemaProps)
						}
						(*v6).UnmarshalEasyJSON(in)
					}
					out.OneOf = append(out.OneOf, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pattern":
			out.Pattern = string(in.String())
		case "patternProperties":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.PatternProperties = make(map[string]JSONSchemaProps)
				} else {
					out.PatternProperties = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 JSONSchemaProps
					(v7).UnmarshalEasyJSON(in)
					(out.PatternProperties)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "properties":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Properties = make(map[string]JSONSchemaProps)
				} else {
					out.Properties = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 JSONSchemaProps
					(v8).UnmarshalEasyJSON(in)
					(out.Properties)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "required":
			if in.IsNull() {
				in.Skip()
				out.Required = nil
			} else {
				in.Delim('[')
				if out.Required == nil {
					if !in.IsDelim(']') {
						out.Required = make([]string, 0, 4)
					} else {
						out.Required = []string{}
					}
				} else {
					out.Required = (out.Required)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.Required = append(out.Required, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "title":
			out.Title = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "uniqueItems":
			out.UniqueItems = bool(in.Bool())
		case "x-kubernetes-embedded-resource":
			out.XKubernetesEmbeddedResource = bool(in.Bool())
		case "x-kubernetes-int-or-string":
			out.XKubernetesIntOrString = bool(in.Bool())
		case "x-kubernetes-list-map-keys":
			if in.IsNull() {
				in.Skip()
				out.XKubernetesListMapKeys = nil
			} else {
				in.Delim('[')
				if out.XKubernetesListMapKeys == nil {
					if !in.IsDelim(']') {
						out.XKubernetesListMapKeys = make([]string, 0, 4)
					} else {
						out.XKubernetesListMapKeys = []string{}
					}
				} else {
					out.XKubernetesListMapKeys = (out.XKubernetesListMapKeys)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.XKubernetesListMapKeys = append(out.XKubernetesListMapKeys, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "x-kubernetes-list-type":
			out.XKubernetesListType = string(in.String())
		case "x-kubernetes-map-type":
			out.XKubernetesMapType = string(in.String())
		case "x-kubernetes-preserve-unknown-fields":
			out.XKubernetesPreserveUnknownFields = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson51a8e721EncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1(out *jwriter.Writer, in JSONSchemaProps) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DollarRef != "" {
		const prefix string = ",\"$ref\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.DollarRef))
	}
	if in.DollarSchema != "" {
		const prefix string = ",\"$schema\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DollarSchema))
	}
	if in.AdditionalItems != nil {
		const prefix string = ",\"additionalItems\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.AdditionalItems.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.AdditionalItems.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.AdditionalItems))
		}
	}
	if in.AdditionalProperties != nil {
		const prefix string = ",\"additionalProperties\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.AdditionalProperties.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.AdditionalProperties.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.AdditionalProperties))
		}
	}
	{
		const prefix string = ",\"allOf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AllOf == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.AllOf {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"anyOf\":"
		out.RawString(prefix)
		if in.AnyOf == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.AnyOf {
				if v13 > 0 {
					out.RawByte(',')
				}
				if v14 == nil {
					out.RawString("null")
				} else {
					(*v14).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Default != nil {
		const prefix string = ",\"default\":"
		out.RawString(prefix)
		if m, ok := in.Default.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Default.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Default))
		}
	}
	if len(in.Definitions) != 0 {
		const prefix string = ",\"definitions\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v15First := true
			for v15Name, v15Value := range in.Definitions {
				if v15First {
					v15First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v15Name))
				out.RawByte(':')
				(v15Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Dependencies) != 0 {
		const prefix string = ",\"dependencies\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v16First := true
			for v16Name, v16Value := range in.Dependencies {
				if v16First {
					v16First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v16Name))
				out.RawByte(':')
				if m, ok := v16Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v16Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v16Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"enum\":"
		out.RawString(prefix)
		if in.Enum == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Enum {
				if v17 > 0 {
					out.RawByte(',')
				}
				if m, ok := v18.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v18.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v18))
				}
			}
			out.RawByte(']')
		}
	}
	if in.Example != nil {
		const prefix string = ",\"example\":"
		out.RawString(prefix)
		if m, ok := in.Example.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Example.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Example))
		}
	}
	if in.ExclusiveMaximum {
		const prefix string = ",\"exclusiveMaximum\":"
		out.RawString(prefix)
		out.Bool(bool(in.ExclusiveMaximum))
	}
	if in.ExclusiveMinimum {
		const prefix string = ",\"exclusiveMinimum\":"
		out.RawString(prefix)
		out.Bool(bool(in.ExclusiveMinimum))
	}
	if in.ExternalDocs != nil {
		const prefix string = ",\"externalDocs\":"
		out.RawString(prefix)
		(*in.ExternalDocs).MarshalEasyJSON(out)
	}
	if in.Format != "" {
		const prefix string = ",\"format\":"
		out.RawString(prefix)
		out.String(string(in.Format))
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	if in.Items != nil {
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if m, ok := in.Items.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Items.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Items))
		}
	}
	if in.MaxItems != 0 {
		const prefix string = ",\"maxItems\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxItems))
	}
	if in.MaxLength != 0 {
		const prefix string = ",\"maxLength\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxLength))
	}
	if in.MaxProperties != 0 {
		const prefix string = ",\"maxProperties\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxProperties))
	}
	if in.Maximum != 0 {
		const prefix string = ",\"maximum\":"
		out.RawString(prefix)
		out.Float64(float64(in.Maximum))
	}
	if in.MinItems != 0 {
		const prefix string = ",\"minItems\":"
		out.RawString(prefix)
		out.Int64(int64(in.MinItems))
	}
	if in.MinLength != 0 {
		const prefix string = ",\"minLength\":"
		out.RawString(prefix)
		out.Int64(int64(in.MinLength))
	}
	if in.MinProperties != 0 {
		const prefix string = ",\"minProperties\":"
		out.RawString(prefix)
		out.Int64(int64(in.MinProperties))
	}
	if in.Minimum != 0 {
		const prefix string = ",\"minimum\":"
		out.RawString(prefix)
		out.Float64(float64(in.Minimum))
	}
	if in.MultipleOf != 0 {
		const prefix string = ",\"multipleOf\":"
		out.RawString(prefix)
		out.Float64(float64(in.MultipleOf))
	}
	if in.Not != nil {
		const prefix string = ",\"not\":"
		out.RawString(prefix)
		(*in.Not).MarshalEasyJSON(out)
	}
	if in.Nullable {
		const prefix string = ",\"nullable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Nullable))
	}
	{
		const prefix string = ",\"oneOf\":"
		out.RawString(prefix)
		if in.OneOf == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.OneOf {
				if v19 > 0 {
					out.RawByte(',')
				}
				if v20 == nil {
					out.RawString("null")
				} else {
					(*v20).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Pattern != "" {
		const prefix string = ",\"pattern\":"
		out.RawString(prefix)
		out.String(string(in.Pattern))
	}
	if len(in.PatternProperties) != 0 {
		const prefix string = ",\"patternProperties\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v21First := true
			for v21Name, v21Value := range in.PatternProperties {
				if v21First {
					v21First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v21Name))
				out.RawByte(':')
				(v21Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Properties) != 0 {
		const prefix string = ",\"properties\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v22First := true
			for v22Name, v22Value := range in.Properties {
				if v22First {
					v22First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v22Name))
				out.RawByte(':')
				(v22Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"required\":"
		out.RawString(prefix)
		if in.Required == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Required {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	if in.UniqueItems {
		const prefix string = ",\"uniqueItems\":"
		out.RawString(prefix)
		out.Bool(bool(in.UniqueItems))
	}
	if in.XKubernetesEmbeddedResource {
		const prefix string = ",\"x-kubernetes-embedded-resource\":"
		out.RawString(prefix)
		out.Bool(bool(in.XKubernetesEmbeddedResource))
	}
	if in.XKubernetesIntOrString {
		const prefix string = ",\"x-kubernetes-int-or-string\":"
		out.RawString(prefix)
		out.Bool(bool(in.XKubernetesIntOrString))
	}
	{
		const prefix string = ",\"x-kubernetes-list-map-keys\":"
		out.RawString(prefix)
		if in.XKubernetesListMapKeys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.XKubernetesListMapKeys {
				if v25 > 0 {
					out.RawByte(',')
				}
				out.String(string(v26))
			}
			out.RawByte(']')
		}
	}
	if in.XKubernetesListType != "" {
		const prefix string = ",\"x-kubernetes-list-type\":"
		out.RawString(prefix)
		out.String(string(in.XKubernetesListType))
	}
	if in.XKubernetesMapType != "" {
		const prefix string = ",\"x-kubernetes-map-type\":"
		out.RawString(prefix)
		out.String(string(in.XKubernetesMapType))
	}
	if in.XKubernetesPreserveUnknownFields {
		const prefix string = ",\"x-kubernetes-preserve-unknown-fields\":"
		out.RawString(prefix)
		out.Bool(bool(in.XKubernetesPreserveUnknownFields))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JSONSchemaProps) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson51a8e721EncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JSONSchemaProps) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson51a8e721EncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JSONSchemaProps) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson51a8e721DecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JSONSchemaProps) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson51a8e721DecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1(l, v)
}
