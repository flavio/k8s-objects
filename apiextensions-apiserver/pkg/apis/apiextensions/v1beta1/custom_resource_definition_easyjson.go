// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"
	_v1 "github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta1(in *jlexer.Lexer, out *CustomResourceDefinition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(_v1.ObjectMeta)
				}
				(*out.Metadata).UnmarshalEasyJSON(in)
			}
		case "spec":
			if in.IsNull() {
				in.Skip()
				out.Spec = nil
			} else {
				if out.Spec == nil {
					out.Spec = new(CustomResourceDefinitionSpec)
				}
				easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta11(in, out.Spec)
			}
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(CustomResourceDefinitionStatus)
				}
				easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta12(in, out.Status)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta1(out *jwriter.Writer, in CustomResourceDefinition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Metadata != nil {
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Metadata).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"spec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Spec == nil {
			out.RawString("null")
		} else {
			easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta11(out, *in.Spec)
		}
	}
	if in.Status != nil {
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta12(out, *in.Status)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CustomResourceDefinition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CustomResourceDefinition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CustomResourceDefinition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CustomResourceDefinition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta1(l, v)
}
func easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta12(in *jlexer.Lexer, out *CustomResourceDefinitionStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "acceptedNames":
			if in.IsNull() {
				in.Skip()
				out.AcceptedNames = nil
			} else {
				if out.AcceptedNames == nil {
					out.AcceptedNames = new(CustomResourceDefinitionNames)
				}
				easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta13(in, out.AcceptedNames)
			}
		case "conditions":
			if in.IsNull() {
				in.Skip()
				out.Conditions = nil
			} else {
				in.Delim('[')
				if out.Conditions == nil {
					if !in.IsDelim(']') {
						out.Conditions = make([]*CustomResourceDefinitionCondition, 0, 8)
					} else {
						out.Conditions = []*CustomResourceDefinitionCondition{}
					}
				} else {
					out.Conditions = (out.Conditions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *CustomResourceDefinitionCondition
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(CustomResourceDefinitionCondition)
						}
						easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta14(in, v1)
					}
					out.Conditions = append(out.Conditions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "storedVersions":
			if in.IsNull() {
				in.Skip()
				out.StoredVersions = nil
			} else {
				in.Delim('[')
				if out.StoredVersions == nil {
					if !in.IsDelim(']') {
						out.StoredVersions = make([]string, 0, 4)
					} else {
						out.StoredVersions = []string{}
					}
				} else {
					out.StoredVersions = (out.StoredVersions)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.StoredVersions = append(out.StoredVersions, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta12(out *jwriter.Writer, in CustomResourceDefinitionStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"acceptedNames\":"
		out.RawString(prefix[1:])
		if in.AcceptedNames == nil {
			out.RawString("null")
		} else {
			easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta13(out, *in.AcceptedNames)
		}
	}
	if len(in.Conditions) != 0 {
		const prefix string = ",\"conditions\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v3, v4 := range in.Conditions {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta14(out, *v4)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"storedVersions\":"
		out.RawString(prefix)
		if in.StoredVersions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.StoredVersions {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta14(in *jlexer.Lexer, out *CustomResourceDefinitionCondition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lastTransitionTime":
			if in.IsNull() {
				in.Skip()
				out.LastTransitionTime = nil
			} else {
				if out.LastTransitionTime == nil {
					out.LastTransitionTime = new(_v1.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LastTransitionTime).UnmarshalJSON(data))
				}
			}
		case "message":
			out.Message = string(in.String())
		case "reason":
			out.Reason = string(in.String())
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(string)
				}
				*out.Status = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta14(out *jwriter.Writer, in CustomResourceDefinitionCondition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LastTransitionTime != nil {
		const prefix string = ",\"lastTransitionTime\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((*in.LastTransitionTime).MarshalJSON())
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	if in.Reason != "" {
		const prefix string = ",\"reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Status == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Status))
		}
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		if in.Type == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Type))
		}
	}
	out.RawByte('}')
}
func easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta13(in *jlexer.Lexer, out *CustomResourceDefinitionNames) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "categories":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]string, 0, 4)
					} else {
						out.Categories = []string{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Categories = append(out.Categories, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "kind":
			if in.IsNull() {
				in.Skip()
				out.Kind = nil
			} else {
				if out.Kind == nil {
					out.Kind = new(string)
				}
				*out.Kind = string(in.String())
			}
		case "listKind":
			out.ListKind = string(in.String())
		case "plural":
			if in.IsNull() {
				in.Skip()
				out.Plural = nil
			} else {
				if out.Plural == nil {
					out.Plural = new(string)
				}
				*out.Plural = string(in.String())
			}
		case "shortNames":
			if in.IsNull() {
				in.Skip()
				out.ShortNames = nil
			} else {
				in.Delim('[')
				if out.ShortNames == nil {
					if !in.IsDelim(']') {
						out.ShortNames = make([]string, 0, 4)
					} else {
						out.ShortNames = []string{}
					}
				} else {
					out.ShortNames = (out.ShortNames)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.ShortNames = append(out.ShortNames, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "singular":
			out.Singular = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta13(out *jwriter.Writer, in CustomResourceDefinitionNames) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Categories) != 0 {
		const prefix string = ",\"categories\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v9, v10 := range in.Categories {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Kind == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Kind))
		}
	}
	if in.ListKind != "" {
		const prefix string = ",\"listKind\":"
		out.RawString(prefix)
		out.String(string(in.ListKind))
	}
	{
		const prefix string = ",\"plural\":"
		out.RawString(prefix)
		if in.Plural == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Plural))
		}
	}
	if len(in.ShortNames) != 0 {
		const prefix string = ",\"shortNames\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v11, v12 := range in.ShortNames {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	if in.Singular != "" {
		const prefix string = ",\"singular\":"
		out.RawString(prefix)
		out.String(string(in.Singular))
	}
	out.RawByte('}')
}
func easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta11(in *jlexer.Lexer, out *CustomResourceDefinitionSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "additionalPrinterColumns":
			if in.IsNull() {
				in.Skip()
				out.AdditionalPrinterColumns = nil
			} else {
				in.Delim('[')
				if out.AdditionalPrinterColumns == nil {
					if !in.IsDelim(']') {
						out.AdditionalPrinterColumns = make([]*CustomResourceColumnDefinition, 0, 8)
					} else {
						out.AdditionalPrinterColumns = []*CustomResourceColumnDefinition{}
					}
				} else {
					out.AdditionalPrinterColumns = (out.AdditionalPrinterColumns)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *CustomResourceColumnDefinition
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(CustomResourceColumnDefinition)
						}
						(*v13).UnmarshalEasyJSON(in)
					}
					out.AdditionalPrinterColumns = append(out.AdditionalPrinterColumns, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "conversion":
			if in.IsNull() {
				in.Skip()
				out.Conversion = nil
			} else {
				if out.Conversion == nil {
					out.Conversion = new(CustomResourceConversion)
				}
				(*out.Conversion).UnmarshalEasyJSON(in)
			}
		case "group":
			if in.IsNull() {
				in.Skip()
				out.Group = nil
			} else {
				if out.Group == nil {
					out.Group = new(string)
				}
				*out.Group = string(in.String())
			}
		case "names":
			if in.IsNull() {
				in.Skip()
				out.Names = nil
			} else {
				if out.Names == nil {
					out.Names = new(CustomResourceDefinitionNames)
				}
				easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta13(in, out.Names)
			}
		case "preserveUnknownFields":
			out.PreserveUnknownFields = bool(in.Bool())
		case "scope":
			if in.IsNull() {
				in.Skip()
				out.Scope = nil
			} else {
				if out.Scope == nil {
					out.Scope = new(string)
				}
				*out.Scope = string(in.String())
			}
		case "subresources":
			if in.IsNull() {
				in.Skip()
				out.Subresources = nil
			} else {
				if out.Subresources == nil {
					out.Subresources = new(CustomResourceSubresources)
				}
				easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta15(in, out.Subresources)
			}
		case "validation":
			if in.IsNull() {
				in.Skip()
				out.Validation = nil
			} else {
				if out.Validation == nil {
					out.Validation = new(CustomResourceValidation)
				}
				easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta16(in, out.Validation)
			}
		case "version":
			out.Version = string(in.String())
		case "versions":
			if in.IsNull() {
				in.Skip()
				out.Versions = nil
			} else {
				in.Delim('[')
				if out.Versions == nil {
					if !in.IsDelim(']') {
						out.Versions = make([]*CustomResourceDefinitionVersion, 0, 8)
					} else {
						out.Versions = []*CustomResourceDefinitionVersion{}
					}
				} else {
					out.Versions = (out.Versions)[:0]
				}
				for !in.IsDelim(']') {
					var v14 *CustomResourceDefinitionVersion
					if in.IsNull() {
						in.Skip()
						v14 = nil
					} else {
						if v14 == nil {
							v14 = new(CustomResourceDefinitionVersion)
						}
						easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta17(in, v14)
					}
					out.Versions = append(out.Versions, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta11(out *jwriter.Writer, in CustomResourceDefinitionSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.AdditionalPrinterColumns) != 0 {
		const prefix string = ",\"additionalPrinterColumns\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v15, v16 := range in.AdditionalPrinterColumns {
				if v15 > 0 {
					out.RawByte(',')
				}
				if v16 == nil {
					out.RawString("null")
				} else {
					(*v16).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Conversion != nil {
		const prefix string = ",\"conversion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Conversion).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Group == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Group))
		}
	}
	{
		const prefix string = ",\"names\":"
		out.RawString(prefix)
		if in.Names == nil {
			out.RawString("null")
		} else {
			easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta13(out, *in.Names)
		}
	}
	if in.PreserveUnknownFields {
		const prefix string = ",\"preserveUnknownFields\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreserveUnknownFields))
	}
	{
		const prefix string = ",\"scope\":"
		out.RawString(prefix)
		if in.Scope == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Scope))
		}
	}
	if in.Subresources != nil {
		const prefix string = ",\"subresources\":"
		out.RawString(prefix)
		easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta15(out, *in.Subresources)
	}
	if in.Validation != nil {
		const prefix string = ",\"validation\":"
		out.RawString(prefix)
		easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta16(out, *in.Validation)
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	if len(in.Versions) != 0 {
		const prefix string = ",\"versions\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v17, v18 := range in.Versions {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta17(out, *v18)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta17(in *jlexer.Lexer, out *CustomResourceDefinitionVersion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "additionalPrinterColumns":
			if in.IsNull() {
				in.Skip()
				out.AdditionalPrinterColumns = nil
			} else {
				in.Delim('[')
				if out.AdditionalPrinterColumns == nil {
					if !in.IsDelim(']') {
						out.AdditionalPrinterColumns = make([]*CustomResourceColumnDefinition, 0, 8)
					} else {
						out.AdditionalPrinterColumns = []*CustomResourceColumnDefinition{}
					}
				} else {
					out.AdditionalPrinterColumns = (out.AdditionalPrinterColumns)[:0]
				}
				for !in.IsDelim(']') {
					var v19 *CustomResourceColumnDefinition
					if in.IsNull() {
						in.Skip()
						v19 = nil
					} else {
						if v19 == nil {
							v19 = new(CustomResourceColumnDefinition)
						}
						(*v19).UnmarshalEasyJSON(in)
					}
					out.AdditionalPrinterColumns = append(out.AdditionalPrinterColumns, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "schema":
			if in.IsNull() {
				in.Skip()
				out.Schema = nil
			} else {
				if out.Schema == nil {
					out.Schema = new(CustomResourceValidation)
				}
				easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta16(in, out.Schema)
			}
		case "served":
			if in.IsNull() {
				in.Skip()
				out.Served = nil
			} else {
				if out.Served == nil {
					out.Served = new(bool)
				}
				*out.Served = bool(in.Bool())
			}
		case "storage":
			if in.IsNull() {
				in.Skip()
				out.Storage = nil
			} else {
				if out.Storage == nil {
					out.Storage = new(bool)
				}
				*out.Storage = bool(in.Bool())
			}
		case "subresources":
			if in.IsNull() {
				in.Skip()
				out.Subresources = nil
			} else {
				if out.Subresources == nil {
					out.Subresources = new(CustomResourceSubresources)
				}
				easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta15(in, out.Subresources)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta17(out *jwriter.Writer, in CustomResourceDefinitionVersion) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.AdditionalPrinterColumns) != 0 {
		const prefix string = ",\"additionalPrinterColumns\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v20, v21 := range in.AdditionalPrinterColumns {
				if v20 > 0 {
					out.RawByte(',')
				}
				if v21 == nil {
					out.RawString("null")
				} else {
					(*v21).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	if in.Schema != nil {
		const prefix string = ",\"schema\":"
		out.RawString(prefix)
		easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta16(out, *in.Schema)
	}
	{
		const prefix string = ",\"served\":"
		out.RawString(prefix)
		if in.Served == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Served))
		}
	}
	{
		const prefix string = ",\"storage\":"
		out.RawString(prefix)
		if in.Storage == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Storage))
		}
	}
	if in.Subresources != nil {
		const prefix string = ",\"subresources\":"
		out.RawString(prefix)
		easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta15(out, *in.Subresources)
	}
	out.RawByte('}')
}
func easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta16(in *jlexer.Lexer, out *CustomResourceValidation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "openAPIV3Schema":
			if in.IsNull() {
				in.Skip()
				out.OpenAPIV3Schema = nil
			} else {
				if out.OpenAPIV3Schema == nil {
					out.OpenAPIV3Schema = new(JSONSchemaProps)
				}
				easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta18(in, out.OpenAPIV3Schema)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta16(out *jwriter.Writer, in CustomResourceValidation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OpenAPIV3Schema != nil {
		const prefix string = ",\"openAPIV3Schema\":"
		first = false
		out.RawString(prefix[1:])
		easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta18(out, *in.OpenAPIV3Schema)
	}
	out.RawByte('}')
}
func easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta18(in *jlexer.Lexer, out *JSONSchemaProps) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "$ref":
			out.DollarRef = string(in.String())
		case "$schema":
			out.DollarSchema = string(in.String())
		case "additionalItems":
			(out.AdditionalItems).UnmarshalEasyJSON(in)
		case "additionalProperties":
			(out.AdditionalProperties).UnmarshalEasyJSON(in)
		case "allOf":
			if in.IsNull() {
				in.Skip()
				out.AllOf = nil
			} else {
				in.Delim('[')
				if out.AllOf == nil {
					if !in.IsDelim(']') {
						out.AllOf = make([]*JSONSchemaProps, 0, 8)
					} else {
						out.AllOf = []*JSONSchemaProps{}
					}
				} else {
					out.AllOf = (out.AllOf)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *JSONSchemaProps
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(JSONSchemaProps)
						}
						easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta18(in, v22)
					}
					out.AllOf = append(out.AllOf, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "anyOf":
			if in.IsNull() {
				in.Skip()
				out.AnyOf = nil
			} else {
				in.Delim('[')
				if out.AnyOf == nil {
					if !in.IsDelim(']') {
						out.AnyOf = make([]*JSONSchemaProps, 0, 8)
					} else {
						out.AnyOf = []*JSONSchemaProps{}
					}
				} else {
					out.AnyOf = (out.AnyOf)[:0]
				}
				for !in.IsDelim(']') {
					var v23 *JSONSchemaProps
					if in.IsNull() {
						in.Skip()
						v23 = nil
					} else {
						if v23 == nil {
							v23 = new(JSONSchemaProps)
						}
						easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta18(in, v23)
					}
					out.AnyOf = append(out.AnyOf, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "default":
			(out.Default).UnmarshalEasyJSON(in)
		case "definitions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Definitions = make(map[string]*JSONSchemaProps)
				} else {
					out.Definitions = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v24 *JSONSchemaProps
					if in.IsNull() {
						in.Skip()
						v24 = nil
					} else {
						if v24 == nil {
							v24 = new(JSONSchemaProps)
						}
						easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta18(in, v24)
					}
					(out.Definitions)[key] = v24
					in.WantComma()
				}
				in.Delim('}')
			}
		case "dependencies":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Dependencies = make(map[string]easyjson.RawMessage)
				} else {
					out.Dependencies = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v25 easyjson.RawMessage
					(v25).UnmarshalEasyJSON(in)
					(out.Dependencies)[key] = v25
					in.WantComma()
				}
				in.Delim('}')
			}
		case "description":
			out.Description = string(in.String())
		case "enum":
			if in.IsNull() {
				in.Skip()
				out.Enum = nil
			} else {
				in.Delim('[')
				if out.Enum == nil {
					if !in.IsDelim(']') {
						out.Enum = make([]easyjson.RawMessage, 0, 2)
					} else {
						out.Enum = []easyjson.RawMessage{}
					}
				} else {
					out.Enum = (out.Enum)[:0]
				}
				for !in.IsDelim(']') {
					var v26 easyjson.RawMessage
					(v26).UnmarshalEasyJSON(in)
					out.Enum = append(out.Enum, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "example":
			(out.Example).UnmarshalEasyJSON(in)
		case "exclusiveMaximum":
			out.ExclusiveMaximum = bool(in.Bool())
		case "exclusiveMinimum":
			out.ExclusiveMinimum = bool(in.Bool())
		case "externalDocs":
			if in.IsNull() {
				in.Skip()
				out.ExternalDocs = nil
			} else {
				if out.ExternalDocs == nil {
					out.ExternalDocs = new(ExternalDocumentation)
				}
				easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta19(in, out.ExternalDocs)
			}
		case "format":
			out.Format = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "items":
			(out.Items).UnmarshalEasyJSON(in)
		case "maxItems":
			out.MaxItems = int64(in.Int64())
		case "maxLength":
			out.MaxLength = int64(in.Int64())
		case "maxProperties":
			out.MaxProperties = int64(in.Int64())
		case "maximum":
			out.Maximum = float64(in.Float64())
		case "minItems":
			out.MinItems = int64(in.Int64())
		case "minLength":
			out.MinLength = int64(in.Int64())
		case "minProperties":
			out.MinProperties = int64(in.Int64())
		case "minimum":
			out.Minimum = float64(in.Float64())
		case "multipleOf":
			out.MultipleOf = float64(in.Float64())
		case "not":
			if in.IsNull() {
				in.Skip()
				out.Not = nil
			} else {
				if out.Not == nil {
					out.Not = new(JSONSchemaProps)
				}
				easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta18(in, out.Not)
			}
		case "nullable":
			out.Nullable = bool(in.Bool())
		case "oneOf":
			if in.IsNull() {
				in.Skip()
				out.OneOf = nil
			} else {
				in.Delim('[')
				if out.OneOf == nil {
					if !in.IsDelim(']') {
						out.OneOf = make([]*JSONSchemaProps, 0, 8)
					} else {
						out.OneOf = []*JSONSchemaProps{}
					}
				} else {
					out.OneOf = (out.OneOf)[:0]
				}
				for !in.IsDelim(']') {
					var v27 *JSONSchemaProps
					if in.IsNull() {
						in.Skip()
						v27 = nil
					} else {
						if v27 == nil {
							v27 = new(JSONSchemaProps)
						}
						easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta18(in, v27)
					}
					out.OneOf = append(out.OneOf, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pattern":
			out.Pattern = string(in.String())
		case "patternProperties":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.PatternProperties = make(map[string]*JSONSchemaProps)
				} else {
					out.PatternProperties = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v28 *JSONSchemaProps
					if in.IsNull() {
						in.Skip()
						v28 = nil
					} else {
						if v28 == nil {
							v28 = new(JSONSchemaProps)
						}
						easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta18(in, v28)
					}
					(out.PatternProperties)[key] = v28
					in.WantComma()
				}
				in.Delim('}')
			}
		case "properties":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Properties = make(map[string]*JSONSchemaProps)
				} else {
					out.Properties = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v29 *JSONSchemaProps
					if in.IsNull() {
						in.Skip()
						v29 = nil
					} else {
						if v29 == nil {
							v29 = new(JSONSchemaProps)
						}
						easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta18(in, v29)
					}
					(out.Properties)[key] = v29
					in.WantComma()
				}
				in.Delim('}')
			}
		case "required":
			if in.IsNull() {
				in.Skip()
				out.Required = nil
			} else {
				in.Delim('[')
				if out.Required == nil {
					if !in.IsDelim(']') {
						out.Required = make([]string, 0, 4)
					} else {
						out.Required = []string{}
					}
				} else {
					out.Required = (out.Required)[:0]
				}
				for !in.IsDelim(']') {
					var v30 string
					v30 = string(in.String())
					out.Required = append(out.Required, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "title":
			out.Title = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "uniqueItems":
			out.UniqueItems = bool(in.Bool())
		case "x-kubernetes-embedded-resource":
			out.XKubernetesEmbeddedResource = bool(in.Bool())
		case "x-kubernetes-int-or-string":
			out.XKubernetesIntOrString = bool(in.Bool())
		case "x-kubernetes-list-map-keys":
			if in.IsNull() {
				in.Skip()
				out.XKubernetesListMapKeys = nil
			} else {
				in.Delim('[')
				if out.XKubernetesListMapKeys == nil {
					if !in.IsDelim(']') {
						out.XKubernetesListMapKeys = make([]string, 0, 4)
					} else {
						out.XKubernetesListMapKeys = []string{}
					}
				} else {
					out.XKubernetesListMapKeys = (out.XKubernetesListMapKeys)[:0]
				}
				for !in.IsDelim(']') {
					var v31 string
					v31 = string(in.String())
					out.XKubernetesListMapKeys = append(out.XKubernetesListMapKeys, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "x-kubernetes-list-type":
			out.XKubernetesListType = string(in.String())
		case "x-kubernetes-preserve-unknown-fields":
			out.XKubernetesPreserveUnknownFields = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta18(out *jwriter.Writer, in JSONSchemaProps) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DollarRef != "" {
		const prefix string = ",\"$ref\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.DollarRef))
	}
	if in.DollarSchema != "" {
		const prefix string = ",\"$schema\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DollarSchema))
	}
	if (in.AdditionalItems).IsDefined() {
		const prefix string = ",\"additionalItems\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.AdditionalItems).MarshalEasyJSON(out)
	}
	if (in.AdditionalProperties).IsDefined() {
		const prefix string = ",\"additionalProperties\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.AdditionalProperties).MarshalEasyJSON(out)
	}
	if len(in.AllOf) != 0 {
		const prefix string = ",\"allOf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.AllOf {
				if v32 > 0 {
					out.RawByte(',')
				}
				if v33 == nil {
					out.RawString("null")
				} else {
					easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta18(out, *v33)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.AnyOf) != 0 {
		const prefix string = ",\"anyOf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v34, v35 := range in.AnyOf {
				if v34 > 0 {
					out.RawByte(',')
				}
				if v35 == nil {
					out.RawString("null")
				} else {
					easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta18(out, *v35)
				}
			}
			out.RawByte(']')
		}
	}
	if (in.Default).IsDefined() {
		const prefix string = ",\"default\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Default).MarshalEasyJSON(out)
	}
	if len(in.Definitions) != 0 {
		const prefix string = ",\"definitions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v36First := true
			for v36Name, v36Value := range in.Definitions {
				if v36First {
					v36First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v36Name))
				out.RawByte(':')
				if v36Value == nil {
					out.RawString("null")
				} else {
					easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta18(out, *v36Value)
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Dependencies) != 0 {
		const prefix string = ",\"dependencies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v37First := true
			for v37Name, v37Value := range in.Dependencies {
				if v37First {
					v37First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v37Name))
				out.RawByte(':')
				(v37Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if len(in.Enum) != 0 {
		const prefix string = ",\"enum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v38, v39 := range in.Enum {
				if v38 > 0 {
					out.RawByte(',')
				}
				(v39).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if (in.Example).IsDefined() {
		const prefix string = ",\"example\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Example).MarshalEasyJSON(out)
	}
	if in.ExclusiveMaximum {
		const prefix string = ",\"exclusiveMaximum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ExclusiveMaximum))
	}
	if in.ExclusiveMinimum {
		const prefix string = ",\"exclusiveMinimum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ExclusiveMinimum))
	}
	if in.ExternalDocs != nil {
		const prefix string = ",\"externalDocs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta19(out, *in.ExternalDocs)
	}
	if in.Format != "" {
		const prefix string = ",\"format\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Format))
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if (in.Items).IsDefined() {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Items).MarshalEasyJSON(out)
	}
	if in.MaxItems != 0 {
		const prefix string = ",\"maxItems\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MaxItems))
	}
	if in.MaxLength != 0 {
		const prefix string = ",\"maxLength\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MaxLength))
	}
	if in.MaxProperties != 0 {
		const prefix string = ",\"maxProperties\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MaxProperties))
	}
	if in.Maximum != 0 {
		const prefix string = ",\"maximum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Maximum))
	}
	if in.MinItems != 0 {
		const prefix string = ",\"minItems\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MinItems))
	}
	if in.MinLength != 0 {
		const prefix string = ",\"minLength\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MinLength))
	}
	if in.MinProperties != 0 {
		const prefix string = ",\"minProperties\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MinProperties))
	}
	if in.Minimum != 0 {
		const prefix string = ",\"minimum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Minimum))
	}
	if in.MultipleOf != 0 {
		const prefix string = ",\"multipleOf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.MultipleOf))
	}
	if in.Not != nil {
		const prefix string = ",\"not\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta18(out, *in.Not)
	}
	if in.Nullable {
		const prefix string = ",\"nullable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Nullable))
	}
	if len(in.OneOf) != 0 {
		const prefix string = ",\"oneOf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v40, v41 := range in.OneOf {
				if v40 > 0 {
					out.RawByte(',')
				}
				if v41 == nil {
					out.RawString("null")
				} else {
					easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta18(out, *v41)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Pattern != "" {
		const prefix string = ",\"pattern\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Pattern))
	}
	if len(in.PatternProperties) != 0 {
		const prefix string = ",\"patternProperties\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v42First := true
			for v42Name, v42Value := range in.PatternProperties {
				if v42First {
					v42First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v42Name))
				out.RawByte(':')
				if v42Value == nil {
					out.RawString("null")
				} else {
					easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta18(out, *v42Value)
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Properties) != 0 {
		const prefix string = ",\"properties\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v43First := true
			for v43Name, v43Value := range in.Properties {
				if v43First {
					v43First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v43Name))
				out.RawByte(':')
				if v43Value == nil {
					out.RawString("null")
				} else {
					easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta18(out, *v43Value)
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Required) != 0 {
		const prefix string = ",\"required\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v44, v45 := range in.Required {
				if v44 > 0 {
					out.RawByte(',')
				}
				out.String(string(v45))
			}
			out.RawByte(']')
		}
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.UniqueItems {
		const prefix string = ",\"uniqueItems\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.UniqueItems))
	}
	if in.XKubernetesEmbeddedResource {
		const prefix string = ",\"x-kubernetes-embedded-resource\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.XKubernetesEmbeddedResource))
	}
	if in.XKubernetesIntOrString {
		const prefix string = ",\"x-kubernetes-int-or-string\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.XKubernetesIntOrString))
	}
	if len(in.XKubernetesListMapKeys) != 0 {
		const prefix string = ",\"x-kubernetes-list-map-keys\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v46, v47 := range in.XKubernetesListMapKeys {
				if v46 > 0 {
					out.RawByte(',')
				}
				out.String(string(v47))
			}
			out.RawByte(']')
		}
	}
	if in.XKubernetesListType != "" {
		const prefix string = ",\"x-kubernetes-list-type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.XKubernetesListType))
	}
	if in.XKubernetesPreserveUnknownFields {
		const prefix string = ",\"x-kubernetes-preserve-unknown-fields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.XKubernetesPreserveUnknownFields))
	}
	out.RawByte('}')
}
func easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta19(in *jlexer.Lexer, out *ExternalDocumentation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta19(out *jwriter.Writer, in ExternalDocumentation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"description\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Description))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	out.RawByte('}')
}
func easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta15(in *jlexer.Lexer, out *CustomResourceSubresources) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "scale":
			if in.IsNull() {
				in.Skip()
				out.Scale = nil
			} else {
				if out.Scale == nil {
					out.Scale = new(CustomResourceSubresourceScale)
				}
				easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta110(in, out.Scale)
			}
		case "status":
			(out.Status).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta15(out *jwriter.Writer, in CustomResourceSubresources) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Scale != nil {
		const prefix string = ",\"scale\":"
		first = false
		out.RawString(prefix[1:])
		easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta110(out, *in.Scale)
	}
	if (in.Status).IsDefined() {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Status).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjson52fae72cDecodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta110(in *jlexer.Lexer, out *CustomResourceSubresourceScale) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "labelSelectorPath":
			out.LabelSelectorPath = string(in.String())
		case "specReplicasPath":
			if in.IsNull() {
				in.Skip()
				out.SpecReplicasPath = nil
			} else {
				if out.SpecReplicasPath == nil {
					out.SpecReplicasPath = new(string)
				}
				*out.SpecReplicasPath = string(in.String())
			}
		case "statusReplicasPath":
			if in.IsNull() {
				in.Skip()
				out.StatusReplicasPath = nil
			} else {
				if out.StatusReplicasPath == nil {
					out.StatusReplicasPath = new(string)
				}
				*out.StatusReplicasPath = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52fae72cEncodeGithubComKubewardenK8sObjectsApiextensionsApiserverPkgApisApiextensionsV1beta110(out *jwriter.Writer, in CustomResourceSubresourceScale) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LabelSelectorPath != "" {
		const prefix string = ",\"labelSelectorPath\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.LabelSelectorPath))
	}
	{
		const prefix string = ",\"specReplicasPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.SpecReplicasPath == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.SpecReplicasPath))
		}
	}
	{
		const prefix string = ",\"statusReplicasPath\":"
		out.RawString(prefix)
		if in.StatusReplicasPath == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.StatusReplicasPath))
		}
	}
	out.RawByte('}')
}
