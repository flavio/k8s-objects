// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"
	_v1 "github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson74661531DecodeGithubComKubewardenK8sObjectsApiResourceV1alpha1(in *jlexer.Lexer, out *ResourceClaim) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(_v1.ObjectMeta)
				}
				(*out.Metadata).UnmarshalEasyJSON(in)
			}
		case "spec":
			if in.IsNull() {
				in.Skip()
				out.Spec = nil
			} else {
				if out.Spec == nil {
					out.Spec = new(ResourceClaimSpec)
				}
				easyjson74661531DecodeGithubComKubewardenK8sObjectsApiResourceV1alpha11(in, out.Spec)
			}
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(ResourceClaimStatus)
				}
				easyjson74661531DecodeGithubComKubewardenK8sObjectsApiResourceV1alpha12(in, out.Status)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson74661531EncodeGithubComKubewardenK8sObjectsApiResourceV1alpha1(out *jwriter.Writer, in ResourceClaim) {
	out.RawByte('{')
	first := true
	_ = first
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Metadata != nil {
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Metadata).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"spec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Spec == nil {
			out.RawString("null")
		} else {
			easyjson74661531EncodeGithubComKubewardenK8sObjectsApiResourceV1alpha11(out, *in.Spec)
		}
	}
	if in.Status != nil {
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		easyjson74661531EncodeGithubComKubewardenK8sObjectsApiResourceV1alpha12(out, *in.Status)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResourceClaim) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson74661531EncodeGithubComKubewardenK8sObjectsApiResourceV1alpha1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResourceClaim) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson74661531EncodeGithubComKubewardenK8sObjectsApiResourceV1alpha1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResourceClaim) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson74661531DecodeGithubComKubewardenK8sObjectsApiResourceV1alpha1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResourceClaim) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson74661531DecodeGithubComKubewardenK8sObjectsApiResourceV1alpha1(l, v)
}
func easyjson74661531DecodeGithubComKubewardenK8sObjectsApiResourceV1alpha12(in *jlexer.Lexer, out *ResourceClaimStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "allocation":
			if in.IsNull() {
				in.Skip()
				out.Allocation = nil
			} else {
				if out.Allocation == nil {
					out.Allocation = new(AllocationResult)
				}
				(*out.Allocation).UnmarshalEasyJSON(in)
			}
		case "deallocationRequested":
			out.DeallocationRequested = bool(in.Bool())
		case "driverName":
			out.DriverName = string(in.String())
		case "reservedFor":
			if in.IsNull() {
				in.Skip()
				out.ReservedFor = nil
			} else {
				in.Delim('[')
				if out.ReservedFor == nil {
					if !in.IsDelim(']') {
						out.ReservedFor = make([]*ResourceClaimConsumerReference, 0, 8)
					} else {
						out.ReservedFor = []*ResourceClaimConsumerReference{}
					}
				} else {
					out.ReservedFor = (out.ReservedFor)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *ResourceClaimConsumerReference
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(ResourceClaimConsumerReference)
						}
						easyjson74661531DecodeGithubComKubewardenK8sObjectsApiResourceV1alpha13(in, v1)
					}
					out.ReservedFor = append(out.ReservedFor, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson74661531EncodeGithubComKubewardenK8sObjectsApiResourceV1alpha12(out *jwriter.Writer, in ResourceClaimStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Allocation != nil {
		const prefix string = ",\"allocation\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Allocation).MarshalEasyJSON(out)
	}
	if in.DeallocationRequested {
		const prefix string = ",\"deallocationRequested\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DeallocationRequested))
	}
	if in.DriverName != "" {
		const prefix string = ",\"driverName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DriverName))
	}
	if len(in.ReservedFor) != 0 {
		const prefix string = ",\"reservedFor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.ReservedFor {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					easyjson74661531EncodeGithubComKubewardenK8sObjectsApiResourceV1alpha13(out, *v3)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson74661531DecodeGithubComKubewardenK8sObjectsApiResourceV1alpha13(in *jlexer.Lexer, out *ResourceClaimConsumerReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiGroup":
			out.APIGroup = string(in.String())
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "resource":
			if in.IsNull() {
				in.Skip()
				out.Resource = nil
			} else {
				if out.Resource == nil {
					out.Resource = new(string)
				}
				*out.Resource = string(in.String())
			}
		case "uid":
			if in.IsNull() {
				in.Skip()
				out.UID = nil
			} else {
				if out.UID == nil {
					out.UID = new(string)
				}
				*out.UID = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson74661531EncodeGithubComKubewardenK8sObjectsApiResourceV1alpha13(out *jwriter.Writer, in ResourceClaimConsumerReference) {
	out.RawByte('{')
	first := true
	_ = first
	if in.APIGroup != "" {
		const prefix string = ",\"apiGroup\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.APIGroup))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"resource\":"
		out.RawString(prefix)
		if in.Resource == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Resource))
		}
	}
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix)
		if in.UID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.UID))
		}
	}
	out.RawByte('}')
}
func easyjson74661531DecodeGithubComKubewardenK8sObjectsApiResourceV1alpha11(in *jlexer.Lexer, out *ResourceClaimSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "allocationMode":
			out.AllocationMode = string(in.String())
		case "parametersRef":
			if in.IsNull() {
				in.Skip()
				out.ParametersRef = nil
			} else {
				if out.ParametersRef == nil {
					out.ParametersRef = new(ResourceClaimParametersReference)
				}
				easyjson74661531DecodeGithubComKubewardenK8sObjectsApiResourceV1alpha14(in, out.ParametersRef)
			}
		case "resourceClassName":
			if in.IsNull() {
				in.Skip()
				out.ResourceClassName = nil
			} else {
				if out.ResourceClassName == nil {
					out.ResourceClassName = new(string)
				}
				*out.ResourceClassName = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson74661531EncodeGithubComKubewardenK8sObjectsApiResourceV1alpha11(out *jwriter.Writer, in ResourceClaimSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AllocationMode != "" {
		const prefix string = ",\"allocationMode\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.AllocationMode))
	}
	if in.ParametersRef != nil {
		const prefix string = ",\"parametersRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson74661531EncodeGithubComKubewardenK8sObjectsApiResourceV1alpha14(out, *in.ParametersRef)
	}
	{
		const prefix string = ",\"resourceClassName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ResourceClassName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ResourceClassName))
		}
	}
	out.RawByte('}')
}
func easyjson74661531DecodeGithubComKubewardenK8sObjectsApiResourceV1alpha14(in *jlexer.Lexer, out *ResourceClaimParametersReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiGroup":
			out.APIGroup = string(in.String())
		case "kind":
			if in.IsNull() {
				in.Skip()
				out.Kind = nil
			} else {
				if out.Kind == nil {
					out.Kind = new(string)
				}
				*out.Kind = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson74661531EncodeGithubComKubewardenK8sObjectsApiResourceV1alpha14(out *jwriter.Writer, in ResourceClaimParametersReference) {
	out.RawByte('{')
	first := true
	_ = first
	if in.APIGroup != "" {
		const prefix string = ",\"apiGroup\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.APIGroup))
	}
	{
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Kind == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Kind))
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	out.RawByte('}')
}
