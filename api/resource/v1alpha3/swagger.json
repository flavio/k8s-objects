{"swagger":"2.0","info":{"title":"kubernetes","version":"unversioned"},"paths":{},"definitions":{"AllocatedDeviceStatus":{"description":"AllocatedDeviceStatus contains the status of an allocated device, if the driver chooses to report it. This may include driver-specific information.","type":"object","required":["driver","pool","device"],"properties":{"conditions":{"description":"Conditions contains the latest observation of the device's state. If the device has been configured according to the class and claim config references, the `Ready` condition should be True.","type":"array","items":{"x-go-type":{"import":{"alias":"apimachinery_pkg_apis_meta_v1","package":"github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"},"type":"Condition"},"x-nullable":true,"x-omitempty":true},"x-kubernetes-list-map-keys":["type"],"x-kubernetes-list-type":"map","x-omitempty":true},"data":{"description":"Data contains arbitrary driver-specific data.\n\nThe length of the raw data must be smaller or equal to 10 Ki.","x-go-type":{"import":{"package":"encoding/json"},"type":"RawMessage"},"x-nullable":false,"x-omitempty":true},"device":{"description":"Device references one device instance via its name in the driver's resource pool. It must be a DNS label.","type":"string"},"driver":{"description":"Driver specifies the name of the DRA driver whose kubelet plugin should be invoked to process the allocation once the claim is needed on a node.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.","type":"string"},"networkData":{"description":"NetworkData contains network-related information specific to the device.","x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/NetworkDeviceData"},"pool":{"description":"This name together with the driver name and the device name field identify which device was allocated (`\u003cdriver name\u003e/\u003cpool name\u003e/\u003cdevice name\u003e`).\n\nMust not be longer than 253 characters and may contain one or more DNS sub-domains separated by slashes.","type":"string"}}},"AllocationResult":{"description":"AllocationResult contains attributes of an allocated resource.","type":"object","properties":{"devices":{"description":"Devices is the result of allocating devices.","x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/DeviceAllocationResult"},"nodeSelector":{"description":"NodeSelector defines where the allocated resources are available. If unset, they are available everywhere.","x-go-type":{"import":{"alias":"api_core_v1","package":"github.com/kubewarden/k8s-objects/api/core/v1"},"type":"NodeSelector"},"x-nullable":true,"x-omitempty":true}}},"BasicDevice":{"description":"BasicDevice defines one device instance.","type":"object","properties":{"attributes":{"description":"Attributes defines the set of attributes for this device. The name of each attribute must be unique in that set.\n\nThe maximum number of attributes and capacities combined is 32.","type":"object","additionalProperties":{"x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/DeviceAttribute"},"x-omitempty":true},"capacity":{"description":"Capacity defines the set of capacities for this device. The name of each capacity must be unique in that set.\n\nThe maximum number of attributes and capacities combined is 32.","type":"object","additionalProperties":{"x-go-type":{"import":{"alias":"apimachinery_pkg_api_resource","package":"github.com/kubewarden/k8s-objects/apimachinery/pkg/api/resource"},"type":"Quantity"},"x-nullable":true,"x-omitempty":true},"x-omitempty":true}}},"CELDeviceSelector":{"description":"CELDeviceSelector contains a CEL expression for selecting a device.","type":"object","required":["expression"],"properties":{"expression":{"description":"Expression is a CEL expression which evaluates a single device. It must evaluate to true when the device under consideration satisfies the desired criteria, and false when it does not. Any other result is an error and causes allocation of devices to abort.\n\nThe expression's input is an object named \"device\", which carries the following properties:\n - driver (string): the name of the driver which defines this device.\n - attributes (map[string]object): the device's attributes, grouped by prefix\n   (e.g. device.attributes[\"dra.example.com\"] evaluates to an object with all\n   of the attributes which were prefixed by \"dra.example.com\".\n - capacity (map[string]object): the device's capacities, grouped by prefix.\n\nExample: Consider a device with driver=\"dra.example.com\", which exposes two attributes named \"model\" and \"ext.example.com/family\" and which exposes one capacity named \"modules\". This input to this expression would have the following fields:\n\n    device.driver\n    device.attributes[\"dra.example.com\"].model\n    device.attributes[\"ext.example.com\"].family\n    device.capacity[\"dra.example.com\"].modules\n\nThe device.driver field can be used to check for a specific driver, either as a high-level precondition (i.e. you only want to consider devices from this driver) or as part of a multi-clause expression that is meant to consider devices from different drivers.\n\nThe value type of each attribute is defined by the device definition, and users who write these expressions must consult the documentation for their specific drivers. The value type of each capacity is Quantity.\n\nIf an unknown prefix is used as a lookup in either device.attributes or device.capacity, an empty map will be returned. Any reference to an unknown field will cause an evaluation error and allocation to abort.\n\nA robust expression should check for the existence of attributes before referencing them.\n\nFor ease of use, the cel.bind() function is enabled, and can be used to simplify expressions that access multiple attributes with the same domain. For example:\n\n    cel.bind(dra, device.attributes[\"dra.example.com\"], dra.someBool \u0026\u0026 dra.anotherBool)\n\nThe length of the expression must be smaller or equal to 10 Ki. The cost of evaluating it is also limited based on the estimated number of logical steps.","type":"string"}}},"Device":{"description":"Device represents one individual hardware instance that can be selected based on its attributes. Besides the name, exactly one field must be set.","type":"object","required":["name"],"properties":{"basic":{"description":"Basic defines one device instance.","x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/BasicDevice"},"name":{"description":"Name is unique identifier among all devices managed by the driver in the pool. It must be a DNS label.","type":"string"}}},"DeviceAllocationConfiguration":{"description":"DeviceAllocationConfiguration gets embedded in an AllocationResult.","type":"object","required":["source"],"properties":{"opaque":{"description":"Opaque provides driver-specific configuration parameters.","x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/OpaqueDeviceConfiguration"},"requests":{"description":"Requests lists the names of requests where the configuration applies. If empty, its applies to all requests.","type":"array","items":{"type":"string","x-omitempty":true},"x-kubernetes-list-type":"atomic","x-omitempty":true},"source":{"description":"Source records whether the configuration comes from a class and thus is not something that a normal user would have been able to set or from a claim.","type":"string"}}},"DeviceAllocationResult":{"description":"DeviceAllocationResult is the result of allocating devices.","type":"object","properties":{"config":{"description":"This field is a combination of all the claim and class configuration parameters. Drivers can distinguish between those based on a flag.\n\nThis includes configuration parameters for drivers which have no allocated devices in the result because it is up to the drivers which configuration parameters they support. They can silently ignore unknown configuration parameters.","type":"array","items":{"x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/DeviceAllocationConfiguration"},"x-kubernetes-list-type":"atomic","x-omitempty":true},"results":{"description":"Results lists all allocated devices.","type":"array","items":{"x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/DeviceRequestAllocationResult"},"x-kubernetes-list-type":"atomic","x-omitempty":true}}},"DeviceAttribute":{"description":"DeviceAttribute must have exactly one field set.","type":"object","properties":{"bool":{"description":"BoolValue is a true/false value.","type":"boolean","x-omitempty":true},"int":{"description":"IntValue is a number.","type":"integer","format":"int64","x-omitempty":true},"string":{"description":"StringValue is a string. Must not be longer than 64 characters.","type":"string","x-omitempty":true},"version":{"description":"VersionValue is a semantic version according to semver.org spec 2.0.0. Must not be longer than 64 characters.","type":"string","x-omitempty":true}}},"DeviceClaim":{"description":"DeviceClaim defines how to request devices with a ResourceClaim.","type":"object","properties":{"config":{"description":"This field holds configuration for multiple potential drivers which could satisfy requests in this claim. It is ignored while allocating the claim.","type":"array","items":{"x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/DeviceClaimConfiguration"},"x-kubernetes-list-type":"atomic","x-omitempty":true},"constraints":{"description":"These constraints must be satisfied by the set of devices that get allocated for the claim.","type":"array","items":{"x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/DeviceConstraint"},"x-kubernetes-list-type":"atomic","x-omitempty":true},"requests":{"description":"Requests represent individual requests for distinct devices which must all be satisfied. If empty, nothing needs to be allocated.","type":"array","items":{"x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/DeviceRequest"},"x-kubernetes-list-type":"atomic","x-omitempty":true}}},"DeviceClaimConfiguration":{"description":"DeviceClaimConfiguration is used for configuration parameters in DeviceClaim.","type":"object","properties":{"opaque":{"description":"Opaque provides driver-specific configuration parameters.","x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/OpaqueDeviceConfiguration"},"requests":{"description":"Requests lists the names of requests where the configuration applies. If empty, it applies to all requests.","type":"array","items":{"type":"string","x-omitempty":true},"x-kubernetes-list-type":"atomic","x-omitempty":true}}},"DeviceClass":{"description":"DeviceClass is a vendor- or admin-provided resource that contains device configuration and selectors. It can be referenced in the device requests of a claim to apply these presets. Cluster scoped.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.","type":"object","required":["spec"],"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string","x-omitempty":true},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string","x-omitempty":true},"metadata":{"description":"Standard object metadata","x-go-type":{"import":{"alias":"apimachinery_pkg_apis_meta_v1","package":"github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"},"type":"ObjectMeta"},"x-nullable":true,"x-omitempty":true},"spec":{"description":"Spec defines what can be allocated and how to configure it.\n\nThis is mutable. Consumers have to be prepared for classes changing at any time, either because they get updated or replaced. Claim allocations are done once based on whatever was set in classes at the time of allocation.\n\nChanging the spec automatically increments the metadata.generation number.","$ref":"#/definitions/DeviceClassSpec"}},"x-kubernetes-group-version-kind":[{"group":"resource.k8s.io","kind":"DeviceClass","version":"v1alpha3"}]},"DeviceClassConfiguration":{"description":"DeviceClassConfiguration is used in DeviceClass.","type":"object","properties":{"opaque":{"description":"Opaque provides driver-specific configuration parameters.","x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/OpaqueDeviceConfiguration"}}},"DeviceClassList":{"description":"DeviceClassList is a collection of classes.","type":"object","required":["items"],"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string","x-omitempty":true},"items":{"description":"Items is the list of resource classes.","type":"array","items":{"$ref":"#/definitions/DeviceClass"}},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string","x-omitempty":true},"metadata":{"description":"Standard list metadata","x-go-type":{"import":{"alias":"apimachinery_pkg_apis_meta_v1","package":"github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"},"type":"ListMeta"},"x-nullable":true,"x-omitempty":true}},"x-kubernetes-group-version-kind":[{"group":"resource.k8s.io","kind":"DeviceClassList","version":"v1alpha3"}]},"DeviceClassSpec":{"description":"DeviceClassSpec is used in a [DeviceClass] to define what can be allocated and how to configure it.","type":"object","properties":{"config":{"description":"Config defines configuration parameters that apply to each device that is claimed via this class. Some classses may potentially be satisfied by multiple drivers, so each instance of a vendor configuration applies to exactly one driver.\n\nThey are passed to the driver, but are not considered while allocating the claim.","type":"array","items":{"x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/DeviceClassConfiguration"},"x-kubernetes-list-type":"atomic","x-omitempty":true},"selectors":{"description":"Each selector must be satisfied by a device which is claimed via this class.","type":"array","items":{"x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/DeviceSelector"},"x-kubernetes-list-type":"atomic","x-omitempty":true}}},"DeviceConstraint":{"description":"DeviceConstraint must have exactly one field set besides Requests.","type":"object","properties":{"matchAttribute":{"description":"MatchAttribute requires that all devices in question have this attribute and that its type and value are the same across those devices.\n\nFor example, if you specified \"dra.example.com/numa\" (a hypothetical example!), then only devices in the same NUMA node will be chosen. A device which does not have that attribute will not be chosen. All devices should use a value of the same type for this attribute because that is part of its specification, but if one device doesn't, then it also will not be chosen.\n\nMust include the domain qualifier.","type":"string","x-omitempty":true},"requests":{"description":"Requests is a list of the one or more requests in this claim which must co-satisfy this constraint. If a request is fulfilled by multiple devices, then all of the devices must satisfy the constraint. If this is not specified, this constraint applies to all requests in this claim.","type":"array","items":{"type":"string","x-omitempty":true},"x-kubernetes-list-type":"atomic","x-omitempty":true}}},"DeviceRequest":{"description":"DeviceRequest is a request for devices required for a claim. This is typically a request for a single resource like a device, but can also ask for several identical devices.\n\nA DeviceClassName is currently required. Clients must check that it is indeed set. It's absence indicates that something changed in a way that is not supported by the client yet, in which case it must refuse to handle the request.","type":"object","required":["name","deviceClassName"],"properties":{"adminAccess":{"description":"AdminAccess indicates that this is a claim for administrative access to the device(s). Claims with AdminAccess are expected to be used for monitoring or other management services for a device.  They ignore all ordinary claims to the device with respect to access modes and any resource allocations.\n\nThis is an alpha field and requires enabling the DRAAdminAccess feature gate. Admin access is disabled if this field is unset or set to false, otherwise it is enabled.","type":"boolean","x-omitempty":true},"allocationMode":{"description":"AllocationMode and its related fields define how devices are allocated to satisfy this request. Supported values are:\n\n- ExactCount: This request is for a specific number of devices.\n  This is the default. The exact number is provided in the\n  count field.\n\n- All: This request is for all of the matching devices in a pool.\n  Allocation will fail if some devices are already allocated,\n  unless adminAccess is requested.\n\nIf AlloctionMode is not specified, the default mode is ExactCount. If the mode is ExactCount and count is not specified, the default count is one. Any other requests must specify this field.\n\nMore modes may get added in the future. Clients must refuse to handle requests with unknown modes.","type":"string","x-omitempty":true},"count":{"description":"Count is used only when the count mode is \"ExactCount\". Must be greater than zero. If AllocationMode is ExactCount and this field is not specified, the default is one.","type":"integer","format":"int64","x-omitempty":true},"deviceClassName":{"description":"DeviceClassName references a specific DeviceClass, which can define additional configuration and selectors to be inherited by this request.\n\nA class is required. Which classes are available depends on the cluster.\n\nAdministrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then administrators can create an empty DeviceClass for users to reference.","type":"string"},"name":{"description":"Name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.\n\nMust be a DNS label.","type":"string"},"selectors":{"description":"Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this request. All selectors must be satisfied for a device to be considered.","type":"array","items":{"x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/DeviceSelector"},"x-kubernetes-list-type":"atomic","x-omitempty":true}}},"DeviceRequestAllocationResult":{"description":"DeviceRequestAllocationResult contains the allocation result for one request.","type":"object","required":["request","driver","pool","device"],"properties":{"adminAccess":{"description":"AdminAccess indicates that this device was allocated for administrative access. See the corresponding request field for a definition of mode.\n\nThis is an alpha field and requires enabling the DRAAdminAccess feature gate. Admin access is disabled if this field is unset or set to false, otherwise it is enabled.","type":"boolean","x-omitempty":true},"device":{"description":"Device references one device instance via its name in the driver's resource pool. It must be a DNS label.","type":"string"},"driver":{"description":"Driver specifies the name of the DRA driver whose kubelet plugin should be invoked to process the allocation once the claim is needed on a node.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.","type":"string"},"pool":{"description":"This name together with the driver name and the device name field identify which device was allocated (`\u003cdriver name\u003e/\u003cpool name\u003e/\u003cdevice name\u003e`).\n\nMust not be longer than 253 characters and may contain one or more DNS sub-domains separated by slashes.","type":"string"},"request":{"description":"Request is the name of the request in the claim which caused this device to be allocated. Multiple devices may have been allocated per request.","type":"string"}}},"DeviceSelector":{"description":"DeviceSelector must have exactly one field set.","type":"object","properties":{"cel":{"description":"CEL contains a CEL expression for selecting a device.","x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/CELDeviceSelector"}}},"NetworkDeviceData":{"description":"NetworkDeviceData provides network-related details for the allocated device. This information may be filled by drivers or other components to configure or identify the device within a network context.","type":"object","properties":{"hardwareAddress":{"description":"HardwareAddress represents the hardware address (e.g. MAC Address) of the device's network interface.\n\nMust not be longer than 128 characters.","type":"string","x-omitempty":true},"interfaceName":{"description":"InterfaceName specifies the name of the network interface associated with the allocated device. This might be the name of a physical or virtual network interface being configured in the pod.\n\nMust not be longer than 256 characters.","type":"string","x-omitempty":true},"ips":{"description":"IPs lists the network addresses assigned to the device's network interface. This can include both IPv4 and IPv6 addresses. The IPs are in the CIDR notation, which includes both the address and the associated subnet mask. e.g.: \"192.0.2.5/24\" for IPv4 and \"2001:db8::5/64\" for IPv6.","type":"array","items":{"type":"string","x-omitempty":true},"x-kubernetes-list-type":"atomic","x-omitempty":true}}},"OpaqueDeviceConfiguration":{"description":"OpaqueDeviceConfiguration contains configuration parameters for a driver in a format defined by the driver vendor.","type":"object","required":["driver","parameters"],"properties":{"driver":{"description":"Driver is used to determine which kubelet plugin needs to be passed these configuration parameters.\n\nAn admission policy provided by the driver developer could use this to decide whether it needs to validate them.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.","type":"string"},"parameters":{"description":"Parameters can contain arbitrary data. It is the responsibility of the driver developer to handle validation and versioning. Typically this includes self-identification and a version (\"kind\" + \"apiVersion\" for Kubernetes types), with conversion between different versions.\n\nThe length of the raw data must be smaller or equal to 10 Ki.","x-go-type":{"import":{"package":"encoding/json"},"type":"RawMessage"},"x-nullable":false}}},"ResourceClaim":{"description":"ResourceClaim describes a request for access to resources in the cluster, for use by workloads. For example, if a workload needs an accelerator device with specific properties, this is how that request is expressed. The status stanza tracks whether this claim has been satisfied and what specific resources have been allocated.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.","type":"object","required":["spec"],"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string","x-omitempty":true},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string","x-omitempty":true},"metadata":{"description":"Standard object metadata","x-go-type":{"import":{"alias":"apimachinery_pkg_apis_meta_v1","package":"github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"},"type":"ObjectMeta"},"x-nullable":true,"x-omitempty":true},"spec":{"description":"Spec describes what is being requested and how to configure it. The spec is immutable.","$ref":"#/definitions/ResourceClaimSpec"},"status":{"description":"Status describes whether the claim is ready to use and what has been allocated.","x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/ResourceClaimStatus"}},"x-kubernetes-group-version-kind":[{"group":"resource.k8s.io","kind":"ResourceClaim","version":"v1alpha3"}]},"ResourceClaimConsumerReference":{"description":"ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.","type":"object","required":["resource","name","uid"],"properties":{"apiGroup":{"description":"APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.","type":"string","x-omitempty":true},"name":{"description":"Name is the name of resource being referenced.","type":"string"},"resource":{"description":"Resource is the type of resource being referenced, for example \"pods\".","type":"string"},"uid":{"description":"UID identifies exactly one incarnation of the resource.","type":"string"}}},"ResourceClaimList":{"description":"ResourceClaimList is a collection of claims.","type":"object","required":["items"],"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string","x-omitempty":true},"items":{"description":"Items is the list of resource claims.","type":"array","items":{"$ref":"#/definitions/ResourceClaim"}},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string","x-omitempty":true},"metadata":{"description":"Standard list metadata","x-go-type":{"import":{"alias":"apimachinery_pkg_apis_meta_v1","package":"github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"},"type":"ListMeta"},"x-nullable":true,"x-omitempty":true}},"x-kubernetes-group-version-kind":[{"group":"resource.k8s.io","kind":"ResourceClaimList","version":"v1alpha3"}]},"ResourceClaimSpec":{"description":"ResourceClaimSpec defines what is being requested in a ResourceClaim and how to configure it.","type":"object","properties":{"devices":{"description":"Devices defines how to request devices.","x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/DeviceClaim"}}},"ResourceClaimStatus":{"description":"ResourceClaimStatus tracks whether the resource has been allocated and what the result of that was.","type":"object","properties":{"allocation":{"description":"Allocation is set once the claim has been allocated successfully.","x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/AllocationResult"},"devices":{"description":"Devices contains the status of each device allocated for this claim, as reported by the driver. This can include driver-specific information. Entries are owned by their respective drivers.","type":"array","items":{"x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/AllocatedDeviceStatus"},"x-kubernetes-list-map-keys":["driver","device","pool"],"x-kubernetes-list-type":"map","x-omitempty":true},"reservedFor":{"description":"ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started. A claim that is in use or might be in use because it has been reserved must not get deallocated.\n\nIn a cluster with multiple scheduler instances, two pods might get scheduled concurrently by different schedulers. When they reference the same ResourceClaim which already has reached its maximum number of consumers, only one pod can be scheduled.\n\nBoth schedulers try to add their pod to the claim.status.reservedFor field, but only the update that reaches the API server first gets stored. The other one fails with an error and the scheduler which issued it knows that it must put the pod back into the queue, waiting for the ResourceClaim to become usable again.\n\nThere can be at most 32 such reservations. This may get increased in the future, but not reduced.","type":"array","items":{"x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/ResourceClaimConsumerReference"},"x-kubernetes-list-map-keys":["uid"],"x-kubernetes-list-type":"map","x-kubernetes-patch-merge-key":"uid","x-kubernetes-patch-strategy":"merge","x-omitempty":true}}},"ResourceClaimTemplate":{"description":"ResourceClaimTemplate is used to produce ResourceClaim objects.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.","type":"object","required":["spec"],"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string","x-omitempty":true},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string","x-omitempty":true},"metadata":{"description":"Standard object metadata","x-go-type":{"import":{"alias":"apimachinery_pkg_apis_meta_v1","package":"github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"},"type":"ObjectMeta"},"x-nullable":true,"x-omitempty":true},"spec":{"description":"Describes the ResourceClaim that is to be generated.\n\nThis field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.","$ref":"#/definitions/ResourceClaimTemplateSpec"}},"x-kubernetes-group-version-kind":[{"group":"resource.k8s.io","kind":"ResourceClaimTemplate","version":"v1alpha3"}]},"ResourceClaimTemplateList":{"description":"ResourceClaimTemplateList is a collection of claim templates.","type":"object","required":["items"],"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string","x-omitempty":true},"items":{"description":"Items is the list of resource claim templates.","type":"array","items":{"$ref":"#/definitions/ResourceClaimTemplate"}},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string","x-omitempty":true},"metadata":{"description":"Standard list metadata","x-go-type":{"import":{"alias":"apimachinery_pkg_apis_meta_v1","package":"github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"},"type":"ListMeta"},"x-nullable":true,"x-omitempty":true}},"x-kubernetes-group-version-kind":[{"group":"resource.k8s.io","kind":"ResourceClaimTemplateList","version":"v1alpha3"}]},"ResourceClaimTemplateSpec":{"description":"ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.","type":"object","required":["spec"],"properties":{"metadata":{"description":"ObjectMeta may contain labels and annotations that will be copied into the ResourceClaim when creating it. No other fields are allowed and will be rejected during validation.","x-go-type":{"import":{"alias":"apimachinery_pkg_apis_meta_v1","package":"github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"},"type":"ObjectMeta"},"x-nullable":true,"x-omitempty":true},"spec":{"description":"Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.","$ref":"#/definitions/ResourceClaimSpec"}}},"ResourcePool":{"description":"ResourcePool describes the pool that ResourceSlices belong to.","type":"object","required":["name","generation","resourceSliceCount"],"properties":{"generation":{"description":"Generation tracks the change in a pool over time. Whenever a driver changes something about one or more of the resources in a pool, it must change the generation in all ResourceSlices which are part of that pool. Consumers of ResourceSlices should only consider resources from the pool with the highest generation number. The generation may be reset by drivers, which should be fine for consumers, assuming that all ResourceSlices in a pool are updated to match or deleted.\n\nCombined with ResourceSliceCount, this mechanism enables consumers to detect pools which are comprised of multiple ResourceSlices and are in an incomplete state.","type":"integer","format":"int64"},"name":{"description":"Name is used to identify the pool. For node-local devices, this is often the node name, but this is not required.\n\nIt must not be longer than 253 characters and must consist of one or more DNS sub-domains separated by slashes. This field is immutable.","type":"string"},"resourceSliceCount":{"description":"ResourceSliceCount is the total number of ResourceSlices in the pool at this generation number. Must be greater than zero.\n\nConsumers can use this to check whether they have seen all ResourceSlices belonging to the same pool.","type":"integer","format":"int64"}}},"ResourceSlice":{"description":"ResourceSlice represents one or more resources in a pool of similar resources, managed by a common driver. A pool may span more than one ResourceSlice, and exactly how many ResourceSlices comprise a pool is determined by the driver.\n\nAt the moment, the only supported resources are devices with attributes and capacities. Each device in a given pool, regardless of how many ResourceSlices, must have a unique name. The ResourceSlice in which a device gets published may change over time. The unique identifier for a device is the tuple \u003cdriver name\u003e, \u003cpool name\u003e, \u003cdevice name\u003e.\n\nWhenever a driver needs to update a pool, it increments the pool.Spec.Pool.Generation number and updates all ResourceSlices with that new number and new resource definitions. A consumer must only use ResourceSlices with the highest generation number and ignore all others.\n\nWhen allocating all resources in a pool matching certain criteria or when looking for the best solution among several different alternatives, a consumer should check the number of ResourceSlices in a pool (included in each ResourceSlice) to determine whether its view of a pool is complete and if not, should wait until the driver has completed updating the pool.\n\nFor resources that are not local to a node, the node name is not set. Instead, the driver may use a node selector to specify where the devices are available.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.","type":"object","required":["spec"],"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string","x-omitempty":true},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string","x-omitempty":true},"metadata":{"description":"Standard object metadata","x-go-type":{"import":{"alias":"apimachinery_pkg_apis_meta_v1","package":"github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"},"type":"ObjectMeta"},"x-nullable":true,"x-omitempty":true},"spec":{"description":"Contains the information published by the driver.\n\nChanging the spec automatically increments the metadata.generation number.","$ref":"#/definitions/ResourceSliceSpec"}},"x-kubernetes-group-version-kind":[{"group":"resource.k8s.io","kind":"ResourceSlice","version":"v1alpha3"}]},"ResourceSliceList":{"description":"ResourceSliceList is a collection of ResourceSlices.","type":"object","required":["items"],"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string","x-omitempty":true},"items":{"description":"Items is the list of resource ResourceSlices.","type":"array","items":{"$ref":"#/definitions/ResourceSlice"}},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string","x-omitempty":true},"metadata":{"description":"Standard list metadata","x-go-type":{"import":{"alias":"apimachinery_pkg_apis_meta_v1","package":"github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"},"type":"ListMeta"},"x-nullable":true,"x-omitempty":true}},"x-kubernetes-group-version-kind":[{"group":"resource.k8s.io","kind":"ResourceSliceList","version":"v1alpha3"}]},"ResourceSliceSpec":{"description":"ResourceSliceSpec contains the information published by the driver in one ResourceSlice.","type":"object","required":["driver","pool"],"properties":{"allNodes":{"description":"AllNodes indicates that all nodes have access to the resources in the pool.\n\nExactly one of NodeName, NodeSelector and AllNodes must be set.","type":"boolean","x-omitempty":true},"devices":{"description":"Devices lists some or all of the devices in this pool.\n\nMust not have more than 128 entries.","type":"array","items":{"x-nullable":true,"x-omitempty":true,"$ref":"#/definitions/Device"},"x-kubernetes-list-type":"atomic","x-omitempty":true},"driver":{"description":"Driver identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver. This field is immutable.","type":"string"},"nodeName":{"description":"NodeName identifies the node which provides the resources in this pool. A field selector can be used to list only ResourceSlice objects belonging to a certain node.\n\nThis field can be used to limit access from nodes to ResourceSlices with the same node name. It also indicates to autoscalers that adding new nodes of the same type as some old node might also make new resources available.\n\nExactly one of NodeName, NodeSelector and AllNodes must be set. This field is immutable.","type":"string","x-omitempty":true},"nodeSelector":{"description":"NodeSelector defines which nodes have access to the resources in the pool, when that pool is not limited to a single node.\n\nMust use exactly one term.\n\nExactly one of NodeName, NodeSelector and AllNodes must be set.","x-go-type":{"import":{"alias":"api_core_v1","package":"github.com/kubewarden/k8s-objects/api/core/v1"},"type":"NodeSelector"},"x-nullable":true,"x-omitempty":true},"pool":{"description":"Pool describes the pool that this ResourceSlice belongs to.","$ref":"#/definitions/ResourcePool"}}}}}