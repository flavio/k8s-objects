// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1beta3

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8714318cDecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta3(in *jlexer.Lexer, out *FlowSchemaSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "distinguisherMethod":
			if in.IsNull() {
				in.Skip()
				out.DistinguisherMethod = nil
			} else {
				if out.DistinguisherMethod == nil {
					out.DistinguisherMethod = new(FlowDistinguisherMethod)
				}
				(*out.DistinguisherMethod).UnmarshalEasyJSON(in)
			}
		case "matchingPrecedence":
			out.MatchingPrecedence = int32(in.Int32())
		case "priorityLevelConfiguration":
			if in.IsNull() {
				in.Skip()
				out.PriorityLevelConfiguration = nil
			} else {
				if out.PriorityLevelConfiguration == nil {
					out.PriorityLevelConfiguration = new(PriorityLevelConfigurationReference)
				}
				easyjson8714318cDecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta31(in, out.PriorityLevelConfiguration)
			}
		case "rules":
			if in.IsNull() {
				in.Skip()
				out.Rules = nil
			} else {
				in.Delim('[')
				if out.Rules == nil {
					if !in.IsDelim(']') {
						out.Rules = make([]*PolicyRulesWithSubjects, 0, 8)
					} else {
						out.Rules = []*PolicyRulesWithSubjects{}
					}
				} else {
					out.Rules = (out.Rules)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *PolicyRulesWithSubjects
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(PolicyRulesWithSubjects)
						}
						easyjson8714318cDecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta32(in, v1)
					}
					out.Rules = append(out.Rules, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8714318cEncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta3(out *jwriter.Writer, in FlowSchemaSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DistinguisherMethod != nil {
		const prefix string = ",\"distinguisherMethod\":"
		first = false
		out.RawString(prefix[1:])
		(*in.DistinguisherMethod).MarshalEasyJSON(out)
	}
	if in.MatchingPrecedence != 0 {
		const prefix string = ",\"matchingPrecedence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.MatchingPrecedence))
	}
	{
		const prefix string = ",\"priorityLevelConfiguration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PriorityLevelConfiguration == nil {
			out.RawString("null")
		} else {
			easyjson8714318cEncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta31(out, *in.PriorityLevelConfiguration)
		}
	}
	if len(in.Rules) != 0 {
		const prefix string = ",\"rules\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v2, v3 := range in.Rules {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					easyjson8714318cEncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta32(out, *v3)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FlowSchemaSpec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8714318cEncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FlowSchemaSpec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8714318cEncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FlowSchemaSpec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8714318cDecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FlowSchemaSpec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8714318cDecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta3(l, v)
}
func easyjson8714318cDecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta32(in *jlexer.Lexer, out *PolicyRulesWithSubjects) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nonResourceRules":
			if in.IsNull() {
				in.Skip()
				out.NonResourceRules = nil
			} else {
				in.Delim('[')
				if out.NonResourceRules == nil {
					if !in.IsDelim(']') {
						out.NonResourceRules = make([]*NonResourcePolicyRule, 0, 8)
					} else {
						out.NonResourceRules = []*NonResourcePolicyRule{}
					}
				} else {
					out.NonResourceRules = (out.NonResourceRules)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *NonResourcePolicyRule
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(NonResourcePolicyRule)
						}
						easyjson8714318cDecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta33(in, v4)
					}
					out.NonResourceRules = append(out.NonResourceRules, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "resourceRules":
			if in.IsNull() {
				in.Skip()
				out.ResourceRules = nil
			} else {
				in.Delim('[')
				if out.ResourceRules == nil {
					if !in.IsDelim(']') {
						out.ResourceRules = make([]*ResourcePolicyRule, 0, 8)
					} else {
						out.ResourceRules = []*ResourcePolicyRule{}
					}
				} else {
					out.ResourceRules = (out.ResourceRules)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *ResourcePolicyRule
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(ResourcePolicyRule)
						}
						easyjson8714318cDecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta34(in, v5)
					}
					out.ResourceRules = append(out.ResourceRules, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "subjects":
			if in.IsNull() {
				in.Skip()
				out.Subjects = nil
			} else {
				in.Delim('[')
				if out.Subjects == nil {
					if !in.IsDelim(']') {
						out.Subjects = make([]*Subject, 0, 8)
					} else {
						out.Subjects = []*Subject{}
					}
				} else {
					out.Subjects = (out.Subjects)[:0]
				}
				for !in.IsDelim(']') {
					var v6 *Subject
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						if v6 == nil {
							v6 = new(Subject)
						}
						easyjson8714318cDecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta35(in, v6)
					}
					out.Subjects = append(out.Subjects, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8714318cEncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta32(out *jwriter.Writer, in PolicyRulesWithSubjects) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.NonResourceRules) != 0 {
		const prefix string = ",\"nonResourceRules\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v7, v8 := range in.NonResourceRules {
				if v7 > 0 {
					out.RawByte(',')
				}
				if v8 == nil {
					out.RawString("null")
				} else {
					easyjson8714318cEncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta33(out, *v8)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.ResourceRules) != 0 {
		const prefix string = ",\"resourceRules\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.ResourceRules {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil {
					out.RawString("null")
				} else {
					easyjson8714318cEncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta34(out, *v10)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"subjects\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Subjects == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Subjects {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					easyjson8714318cEncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta35(out, *v12)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson8714318cDecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta35(in *jlexer.Lexer, out *Subject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group":
			if in.IsNull() {
				in.Skip()
				out.Group = nil
			} else {
				if out.Group == nil {
					out.Group = new(GroupSubject)
				}
				easyjson8714318cDecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta36(in, out.Group)
			}
		case "kind":
			if in.IsNull() {
				in.Skip()
				out.Kind = nil
			} else {
				if out.Kind == nil {
					out.Kind = new(string)
				}
				*out.Kind = string(in.String())
			}
		case "serviceAccount":
			if in.IsNull() {
				in.Skip()
				out.ServiceAccount = nil
			} else {
				if out.ServiceAccount == nil {
					out.ServiceAccount = new(ServiceAccountSubject)
				}
				easyjson8714318cDecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta37(in, out.ServiceAccount)
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(UserSubject)
				}
				easyjson8714318cDecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta38(in, out.User)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8714318cEncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta35(out *jwriter.Writer, in Subject) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Group != nil {
		const prefix string = ",\"group\":"
		first = false
		out.RawString(prefix[1:])
		easyjson8714318cEncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta36(out, *in.Group)
	}
	{
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Kind == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Kind))
		}
	}
	if in.ServiceAccount != nil {
		const prefix string = ",\"serviceAccount\":"
		out.RawString(prefix)
		easyjson8714318cEncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta37(out, *in.ServiceAccount)
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		easyjson8714318cEncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta38(out, *in.User)
	}
	out.RawByte('}')
}
func easyjson8714318cDecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta38(in *jlexer.Lexer, out *UserSubject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8714318cEncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta38(out *jwriter.Writer, in UserSubject) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	out.RawByte('}')
}
func easyjson8714318cDecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta37(in *jlexer.Lexer, out *ServiceAccountSubject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "namespace":
			if in.IsNull() {
				in.Skip()
				out.Namespace = nil
			} else {
				if out.Namespace == nil {
					out.Namespace = new(string)
				}
				*out.Namespace = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8714318cEncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta37(out *jwriter.Writer, in ServiceAccountSubject) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"namespace\":"
		out.RawString(prefix)
		if in.Namespace == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Namespace))
		}
	}
	out.RawByte('}')
}
func easyjson8714318cDecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta36(in *jlexer.Lexer, out *GroupSubject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8714318cEncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta36(out *jwriter.Writer, in GroupSubject) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	out.RawByte('}')
}
func easyjson8714318cDecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta34(in *jlexer.Lexer, out *ResourcePolicyRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiGroups":
			if in.IsNull() {
				in.Skip()
				out.APIGroups = nil
			} else {
				in.Delim('[')
				if out.APIGroups == nil {
					if !in.IsDelim(']') {
						out.APIGroups = make([]string, 0, 4)
					} else {
						out.APIGroups = []string{}
					}
				} else {
					out.APIGroups = (out.APIGroups)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.APIGroups = append(out.APIGroups, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "clusterScope":
			out.ClusterScope = bool(in.Bool())
		case "namespaces":
			if in.IsNull() {
				in.Skip()
				out.Namespaces = nil
			} else {
				in.Delim('[')
				if out.Namespaces == nil {
					if !in.IsDelim(']') {
						out.Namespaces = make([]string, 0, 4)
					} else {
						out.Namespaces = []string{}
					}
				} else {
					out.Namespaces = (out.Namespaces)[:0]
				}
				for !in.IsDelim(']') {
					var v14 string
					v14 = string(in.String())
					out.Namespaces = append(out.Namespaces, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "resources":
			if in.IsNull() {
				in.Skip()
				out.Resources = nil
			} else {
				in.Delim('[')
				if out.Resources == nil {
					if !in.IsDelim(']') {
						out.Resources = make([]string, 0, 4)
					} else {
						out.Resources = []string{}
					}
				} else {
					out.Resources = (out.Resources)[:0]
				}
				for !in.IsDelim(']') {
					var v15 string
					v15 = string(in.String())
					out.Resources = append(out.Resources, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "verbs":
			if in.IsNull() {
				in.Skip()
				out.Verbs = nil
			} else {
				in.Delim('[')
				if out.Verbs == nil {
					if !in.IsDelim(']') {
						out.Verbs = make([]string, 0, 4)
					} else {
						out.Verbs = []string{}
					}
				} else {
					out.Verbs = (out.Verbs)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.Verbs = append(out.Verbs, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8714318cEncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta34(out *jwriter.Writer, in ResourcePolicyRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"apiGroups\":"
		out.RawString(prefix[1:])
		if in.APIGroups == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.APIGroups {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	if in.ClusterScope {
		const prefix string = ",\"clusterScope\":"
		out.RawString(prefix)
		out.Bool(bool(in.ClusterScope))
	}
	if len(in.Namespaces) != 0 {
		const prefix string = ",\"namespaces\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v19, v20 := range in.Namespaces {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.String(string(v20))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"resources\":"
		out.RawString(prefix)
		if in.Resources == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.Resources {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.String(string(v22))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"verbs\":"
		out.RawString(prefix)
		if in.Verbs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Verbs {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson8714318cDecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta33(in *jlexer.Lexer, out *NonResourcePolicyRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nonResourceURLs":
			if in.IsNull() {
				in.Skip()
				out.NonResourceURLs = nil
			} else {
				in.Delim('[')
				if out.NonResourceURLs == nil {
					if !in.IsDelim(']') {
						out.NonResourceURLs = make([]string, 0, 4)
					} else {
						out.NonResourceURLs = []string{}
					}
				} else {
					out.NonResourceURLs = (out.NonResourceURLs)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.NonResourceURLs = append(out.NonResourceURLs, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "verbs":
			if in.IsNull() {
				in.Skip()
				out.Verbs = nil
			} else {
				in.Delim('[')
				if out.Verbs == nil {
					if !in.IsDelim(']') {
						out.Verbs = make([]string, 0, 4)
					} else {
						out.Verbs = []string{}
					}
				} else {
					out.Verbs = (out.Verbs)[:0]
				}
				for !in.IsDelim(']') {
					var v26 string
					v26 = string(in.String())
					out.Verbs = append(out.Verbs, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8714318cEncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta33(out *jwriter.Writer, in NonResourcePolicyRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nonResourceURLs\":"
		out.RawString(prefix[1:])
		if in.NonResourceURLs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.NonResourceURLs {
				if v27 > 0 {
					out.RawByte(',')
				}
				out.String(string(v28))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"verbs\":"
		out.RawString(prefix)
		if in.Verbs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Verbs {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.String(string(v30))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson8714318cDecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta31(in *jlexer.Lexer, out *PriorityLevelConfigurationReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8714318cEncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta31(out *jwriter.Writer, in PriorityLevelConfigurationReference) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	out.RawByte('}')
}
