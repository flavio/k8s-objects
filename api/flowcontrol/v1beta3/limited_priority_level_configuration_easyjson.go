// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1beta3

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA3e4e4d1DecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta3(in *jlexer.Lexer, out *LimitedPriorityLevelConfiguration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "borrowingLimitPercent":
			out.BorrowingLimitPercent = int32(in.Int32())
		case "lendablePercent":
			out.LendablePercent = int32(in.Int32())
		case "limitResponse":
			if in.IsNull() {
				in.Skip()
				out.LimitResponse = nil
			} else {
				if out.LimitResponse == nil {
					out.LimitResponse = new(LimitResponse)
				}
				(*out.LimitResponse).UnmarshalEasyJSON(in)
			}
		case "nominalConcurrencyShares":
			out.NominalConcurrencyShares = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA3e4e4d1EncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta3(out *jwriter.Writer, in LimitedPriorityLevelConfiguration) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BorrowingLimitPercent != 0 {
		const prefix string = ",\"borrowingLimitPercent\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.BorrowingLimitPercent))
	}
	if in.LendablePercent != 0 {
		const prefix string = ",\"lendablePercent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.LendablePercent))
	}
	if in.LimitResponse != nil {
		const prefix string = ",\"limitResponse\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.LimitResponse).MarshalEasyJSON(out)
	}
	if in.NominalConcurrencyShares != 0 {
		const prefix string = ",\"nominalConcurrencyShares\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.NominalConcurrencyShares))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LimitedPriorityLevelConfiguration) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA3e4e4d1EncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LimitedPriorityLevelConfiguration) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA3e4e4d1EncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LimitedPriorityLevelConfiguration) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA3e4e4d1DecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LimitedPriorityLevelConfiguration) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA3e4e4d1DecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta3(l, v)
}
