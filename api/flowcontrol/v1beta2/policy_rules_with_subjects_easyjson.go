// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1beta2

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA8abfc23DecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta2(in *jlexer.Lexer, out *PolicyRulesWithSubjects) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nonResourceRules":
			if in.IsNull() {
				in.Skip()
				out.NonResourceRules = nil
			} else {
				in.Delim('[')
				if out.NonResourceRules == nil {
					if !in.IsDelim(']') {
						out.NonResourceRules = make([]*NonResourcePolicyRule, 0, 8)
					} else {
						out.NonResourceRules = []*NonResourcePolicyRule{}
					}
				} else {
					out.NonResourceRules = (out.NonResourceRules)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *NonResourcePolicyRule
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(NonResourcePolicyRule)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.NonResourceRules = append(out.NonResourceRules, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "resourceRules":
			if in.IsNull() {
				in.Skip()
				out.ResourceRules = nil
			} else {
				in.Delim('[')
				if out.ResourceRules == nil {
					if !in.IsDelim(']') {
						out.ResourceRules = make([]*ResourcePolicyRule, 0, 8)
					} else {
						out.ResourceRules = []*ResourcePolicyRule{}
					}
				} else {
					out.ResourceRules = (out.ResourceRules)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *ResourcePolicyRule
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(ResourcePolicyRule)
						}
						easyjsonA8abfc23DecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta21(in, v2)
					}
					out.ResourceRules = append(out.ResourceRules, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "subjects":
			if in.IsNull() {
				in.Skip()
				out.Subjects = nil
			} else {
				in.Delim('[')
				if out.Subjects == nil {
					if !in.IsDelim(']') {
						out.Subjects = make([]*Subject, 0, 8)
					} else {
						out.Subjects = []*Subject{}
					}
				} else {
					out.Subjects = (out.Subjects)[:0]
				}
				for !in.IsDelim(']') {
					var v3 *Subject
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(Subject)
						}
						easyjsonA8abfc23DecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta22(in, v3)
					}
					out.Subjects = append(out.Subjects, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8abfc23EncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta2(out *jwriter.Writer, in PolicyRulesWithSubjects) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.NonResourceRules) != 0 {
		const prefix string = ",\"nonResourceRules\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v4, v5 := range in.NonResourceRules {
				if v4 > 0 {
					out.RawByte(',')
				}
				if v5 == nil {
					out.RawString("null")
				} else {
					(*v5).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.ResourceRules) != 0 {
		const prefix string = ",\"resourceRules\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v6, v7 := range in.ResourceRules {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil {
					out.RawString("null")
				} else {
					easyjsonA8abfc23EncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta21(out, *v7)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"subjects\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Subjects == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Subjects {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					easyjsonA8abfc23EncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta22(out, *v9)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PolicyRulesWithSubjects) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8abfc23EncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PolicyRulesWithSubjects) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8abfc23EncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PolicyRulesWithSubjects) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8abfc23DecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PolicyRulesWithSubjects) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8abfc23DecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta2(l, v)
}
func easyjsonA8abfc23DecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta22(in *jlexer.Lexer, out *Subject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group":
			if in.IsNull() {
				in.Skip()
				out.Group = nil
			} else {
				if out.Group == nil {
					out.Group = new(GroupSubject)
				}
				(*out.Group).UnmarshalEasyJSON(in)
			}
		case "kind":
			if in.IsNull() {
				in.Skip()
				out.Kind = nil
			} else {
				if out.Kind == nil {
					out.Kind = new(string)
				}
				*out.Kind = string(in.String())
			}
		case "serviceAccount":
			if in.IsNull() {
				in.Skip()
				out.ServiceAccount = nil
			} else {
				if out.ServiceAccount == nil {
					out.ServiceAccount = new(ServiceAccountSubject)
				}
				easyjsonA8abfc23DecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta23(in, out.ServiceAccount)
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(UserSubject)
				}
				easyjsonA8abfc23DecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta24(in, out.User)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8abfc23EncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta22(out *jwriter.Writer, in Subject) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Group != nil {
		const prefix string = ",\"group\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Group).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Kind == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Kind))
		}
	}
	if in.ServiceAccount != nil {
		const prefix string = ",\"serviceAccount\":"
		out.RawString(prefix)
		easyjsonA8abfc23EncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta23(out, *in.ServiceAccount)
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		easyjsonA8abfc23EncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta24(out, *in.User)
	}
	out.RawByte('}')
}
func easyjsonA8abfc23DecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta24(in *jlexer.Lexer, out *UserSubject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8abfc23EncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta24(out *jwriter.Writer, in UserSubject) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	out.RawByte('}')
}
func easyjsonA8abfc23DecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta23(in *jlexer.Lexer, out *ServiceAccountSubject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "namespace":
			if in.IsNull() {
				in.Skip()
				out.Namespace = nil
			} else {
				if out.Namespace == nil {
					out.Namespace = new(string)
				}
				*out.Namespace = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8abfc23EncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta23(out *jwriter.Writer, in ServiceAccountSubject) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"namespace\":"
		out.RawString(prefix)
		if in.Namespace == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Namespace))
		}
	}
	out.RawByte('}')
}
func easyjsonA8abfc23DecodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta21(in *jlexer.Lexer, out *ResourcePolicyRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiGroups":
			if in.IsNull() {
				in.Skip()
				out.APIGroups = nil
			} else {
				in.Delim('[')
				if out.APIGroups == nil {
					if !in.IsDelim(']') {
						out.APIGroups = make([]string, 0, 4)
					} else {
						out.APIGroups = []string{}
					}
				} else {
					out.APIGroups = (out.APIGroups)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.APIGroups = append(out.APIGroups, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "clusterScope":
			out.ClusterScope = bool(in.Bool())
		case "namespaces":
			if in.IsNull() {
				in.Skip()
				out.Namespaces = nil
			} else {
				in.Delim('[')
				if out.Namespaces == nil {
					if !in.IsDelim(']') {
						out.Namespaces = make([]string, 0, 4)
					} else {
						out.Namespaces = []string{}
					}
				} else {
					out.Namespaces = (out.Namespaces)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.Namespaces = append(out.Namespaces, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "resources":
			if in.IsNull() {
				in.Skip()
				out.Resources = nil
			} else {
				in.Delim('[')
				if out.Resources == nil {
					if !in.IsDelim(']') {
						out.Resources = make([]string, 0, 4)
					} else {
						out.Resources = []string{}
					}
				} else {
					out.Resources = (out.Resources)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.Resources = append(out.Resources, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "verbs":
			if in.IsNull() {
				in.Skip()
				out.Verbs = nil
			} else {
				in.Delim('[')
				if out.Verbs == nil {
					if !in.IsDelim(']') {
						out.Verbs = make([]string, 0, 4)
					} else {
						out.Verbs = []string{}
					}
				} else {
					out.Verbs = (out.Verbs)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.Verbs = append(out.Verbs, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8abfc23EncodeGithubComKubewardenK8sObjectsApiFlowcontrolV1beta21(out *jwriter.Writer, in ResourcePolicyRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"apiGroups\":"
		out.RawString(prefix[1:])
		if in.APIGroups == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.APIGroups {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	if in.ClusterScope {
		const prefix string = ",\"clusterScope\":"
		out.RawString(prefix)
		out.Bool(bool(in.ClusterScope))
	}
	if len(in.Namespaces) != 0 {
		const prefix string = ",\"namespaces\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v16, v17 := range in.Namespaces {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.String(string(v17))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"resources\":"
		out.RawString(prefix)
		if in.Resources == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Resources {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.String(string(v19))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"verbs\":"
		out.RawString(prefix)
		if in.Verbs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Verbs {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
