// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"
	_v1 "github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson10556ac3DecodeGithubComKubewardenK8sObjectsApiAdmissionregistrationV1alpha1(in *jlexer.Lexer, out *MatchResources) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "excludeResourceRules":
			if in.IsNull() {
				in.Skip()
				out.ExcludeResourceRules = nil
			} else {
				in.Delim('[')
				if out.ExcludeResourceRules == nil {
					if !in.IsDelim(']') {
						out.ExcludeResourceRules = make([]*NamedRuleWithOperations, 0, 8)
					} else {
						out.ExcludeResourceRules = []*NamedRuleWithOperations{}
					}
				} else {
					out.ExcludeResourceRules = (out.ExcludeResourceRules)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *NamedRuleWithOperations
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(NamedRuleWithOperations)
						}
						easyjson10556ac3DecodeGithubComKubewardenK8sObjectsApiAdmissionregistrationV1alpha11(in, v1)
					}
					out.ExcludeResourceRules = append(out.ExcludeResourceRules, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "matchPolicy":
			out.MatchPolicy = string(in.String())
		case "namespaceSelector":
			if in.IsNull() {
				in.Skip()
				out.NamespaceSelector = nil
			} else {
				if out.NamespaceSelector == nil {
					out.NamespaceSelector = new(_v1.LabelSelector)
				}
				(*out.NamespaceSelector).UnmarshalEasyJSON(in)
			}
		case "objectSelector":
			if in.IsNull() {
				in.Skip()
				out.ObjectSelector = nil
			} else {
				if out.ObjectSelector == nil {
					out.ObjectSelector = new(_v1.LabelSelector)
				}
				(*out.ObjectSelector).UnmarshalEasyJSON(in)
			}
		case "resourceRules":
			if in.IsNull() {
				in.Skip()
				out.ResourceRules = nil
			} else {
				in.Delim('[')
				if out.ResourceRules == nil {
					if !in.IsDelim(']') {
						out.ResourceRules = make([]*NamedRuleWithOperations, 0, 8)
					} else {
						out.ResourceRules = []*NamedRuleWithOperations{}
					}
				} else {
					out.ResourceRules = (out.ResourceRules)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *NamedRuleWithOperations
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(NamedRuleWithOperations)
						}
						easyjson10556ac3DecodeGithubComKubewardenK8sObjectsApiAdmissionregistrationV1alpha11(in, v2)
					}
					out.ResourceRules = append(out.ResourceRules, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10556ac3EncodeGithubComKubewardenK8sObjectsApiAdmissionregistrationV1alpha1(out *jwriter.Writer, in MatchResources) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.ExcludeResourceRules) != 0 {
		const prefix string = ",\"excludeResourceRules\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v3, v4 := range in.ExcludeResourceRules {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					easyjson10556ac3EncodeGithubComKubewardenK8sObjectsApiAdmissionregistrationV1alpha11(out, *v4)
				}
			}
			out.RawByte(']')
		}
	}
	if in.MatchPolicy != "" {
		const prefix string = ",\"matchPolicy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MatchPolicy))
	}
	if in.NamespaceSelector != nil {
		const prefix string = ",\"namespaceSelector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NamespaceSelector).MarshalEasyJSON(out)
	}
	if in.ObjectSelector != nil {
		const prefix string = ",\"objectSelector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ObjectSelector).MarshalEasyJSON(out)
	}
	if len(in.ResourceRules) != 0 {
		const prefix string = ",\"resourceRules\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.ResourceRules {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					easyjson10556ac3EncodeGithubComKubewardenK8sObjectsApiAdmissionregistrationV1alpha11(out, *v6)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MatchResources) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson10556ac3EncodeGithubComKubewardenK8sObjectsApiAdmissionregistrationV1alpha1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MatchResources) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson10556ac3EncodeGithubComKubewardenK8sObjectsApiAdmissionregistrationV1alpha1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MatchResources) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson10556ac3DecodeGithubComKubewardenK8sObjectsApiAdmissionregistrationV1alpha1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MatchResources) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson10556ac3DecodeGithubComKubewardenK8sObjectsApiAdmissionregistrationV1alpha1(l, v)
}
func easyjson10556ac3DecodeGithubComKubewardenK8sObjectsApiAdmissionregistrationV1alpha11(in *jlexer.Lexer, out *NamedRuleWithOperations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiGroups":
			if in.IsNull() {
				in.Skip()
				out.APIGroups = nil
			} else {
				in.Delim('[')
				if out.APIGroups == nil {
					if !in.IsDelim(']') {
						out.APIGroups = make([]string, 0, 4)
					} else {
						out.APIGroups = []string{}
					}
				} else {
					out.APIGroups = (out.APIGroups)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.APIGroups = append(out.APIGroups, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "apiVersions":
			if in.IsNull() {
				in.Skip()
				out.APIVersions = nil
			} else {
				in.Delim('[')
				if out.APIVersions == nil {
					if !in.IsDelim(']') {
						out.APIVersions = make([]string, 0, 4)
					} else {
						out.APIVersions = []string{}
					}
				} else {
					out.APIVersions = (out.APIVersions)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.APIVersions = append(out.APIVersions, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "operations":
			if in.IsNull() {
				in.Skip()
				out.Operations = nil
			} else {
				in.Delim('[')
				if out.Operations == nil {
					if !in.IsDelim(']') {
						out.Operations = make([]string, 0, 4)
					} else {
						out.Operations = []string{}
					}
				} else {
					out.Operations = (out.Operations)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.Operations = append(out.Operations, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "resourceNames":
			if in.IsNull() {
				in.Skip()
				out.ResourceNames = nil
			} else {
				in.Delim('[')
				if out.ResourceNames == nil {
					if !in.IsDelim(']') {
						out.ResourceNames = make([]string, 0, 4)
					} else {
						out.ResourceNames = []string{}
					}
				} else {
					out.ResourceNames = (out.ResourceNames)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.ResourceNames = append(out.ResourceNames, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "resources":
			if in.IsNull() {
				in.Skip()
				out.Resources = nil
			} else {
				in.Delim('[')
				if out.Resources == nil {
					if !in.IsDelim(']') {
						out.Resources = make([]string, 0, 4)
					} else {
						out.Resources = []string{}
					}
				} else {
					out.Resources = (out.Resources)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.Resources = append(out.Resources, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "scope":
			out.Scope = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10556ac3EncodeGithubComKubewardenK8sObjectsApiAdmissionregistrationV1alpha11(out *jwriter.Writer, in NamedRuleWithOperations) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.APIGroups) != 0 {
		const prefix string = ",\"apiGroups\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v12, v13 := range in.APIGroups {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	if len(in.APIVersions) != 0 {
		const prefix string = ",\"apiVersions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.APIVersions {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	if len(in.Operations) != 0 {
		const prefix string = ",\"operations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.Operations {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.String(string(v17))
			}
			out.RawByte(']')
		}
	}
	if len(in.ResourceNames) != 0 {
		const prefix string = ",\"resourceNames\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.ResourceNames {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.String(string(v19))
			}
			out.RawByte(']')
		}
	}
	if len(in.Resources) != 0 {
		const prefix string = ",\"resources\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.Resources {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	if in.Scope != "" {
		const prefix string = ",\"scope\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Scope))
	}
	out.RawByte('}')
}
