// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1d63a85aDecodeGithubComKubewardenK8sObjectsApiAdmissionregistrationV1alpha1(in *jlexer.Lexer, out *ValidatingAdmissionPolicyBindingSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "matchResources":
			if in.IsNull() {
				in.Skip()
				out.MatchResources = nil
			} else {
				if out.MatchResources == nil {
					out.MatchResources = new(MatchResources)
				}
				(*out.MatchResources).UnmarshalEasyJSON(in)
			}
		case "paramRef":
			if in.IsNull() {
				in.Skip()
				out.ParamRef = nil
			} else {
				if out.ParamRef == nil {
					out.ParamRef = new(ParamRef)
				}
				(*out.ParamRef).UnmarshalEasyJSON(in)
			}
		case "policyName":
			out.PolicyName = string(in.String())
		case "validationActions":
			if in.IsNull() {
				in.Skip()
				out.ValidationActions = nil
			} else {
				in.Delim('[')
				if out.ValidationActions == nil {
					if !in.IsDelim(']') {
						out.ValidationActions = make([]string, 0, 4)
					} else {
						out.ValidationActions = []string{}
					}
				} else {
					out.ValidationActions = (out.ValidationActions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.ValidationActions = append(out.ValidationActions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1d63a85aEncodeGithubComKubewardenK8sObjectsApiAdmissionregistrationV1alpha1(out *jwriter.Writer, in ValidatingAdmissionPolicyBindingSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MatchResources != nil {
		const prefix string = ",\"matchResources\":"
		first = false
		out.RawString(prefix[1:])
		(*in.MatchResources).MarshalEasyJSON(out)
	}
	if in.ParamRef != nil {
		const prefix string = ",\"paramRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ParamRef).MarshalEasyJSON(out)
	}
	if in.PolicyName != "" {
		const prefix string = ",\"policyName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PolicyName))
	}
	if len(in.ValidationActions) != 0 {
		const prefix string = ",\"validationActions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.ValidationActions {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ValidatingAdmissionPolicyBindingSpec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1d63a85aEncodeGithubComKubewardenK8sObjectsApiAdmissionregistrationV1alpha1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ValidatingAdmissionPolicyBindingSpec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1d63a85aEncodeGithubComKubewardenK8sObjectsApiAdmissionregistrationV1alpha1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ValidatingAdmissionPolicyBindingSpec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1d63a85aDecodeGithubComKubewardenK8sObjectsApiAdmissionregistrationV1alpha1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ValidatingAdmissionPolicyBindingSpec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1d63a85aDecodeGithubComKubewardenK8sObjectsApiAdmissionregistrationV1alpha1(l, v)
}
