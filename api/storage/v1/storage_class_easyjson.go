// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	_v1 "github.com/kubewarden/k8s-objects/api/core/v1"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEd5e2e24DecodeGithubComKubewardenK8sObjectsApiStorageV1(in *jlexer.Lexer, out *StorageClass) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "allowVolumeExpansion":
			out.AllowVolumeExpansion = bool(in.Bool())
		case "allowedTopologies":
			if in.IsNull() {
				in.Skip()
				out.AllowedTopologies = nil
			} else {
				in.Delim('[')
				if out.AllowedTopologies == nil {
					if !in.IsDelim(']') {
						out.AllowedTopologies = make([]_v1.TopologySelectorTerm, 0, 2)
					} else {
						out.AllowedTopologies = []_v1.TopologySelectorTerm{}
					}
				} else {
					out.AllowedTopologies = (out.AllowedTopologies)[:0]
				}
				for !in.IsDelim(']') {
					var v1 _v1.TopologySelectorTerm
					(v1).UnmarshalEasyJSON(in)
					out.AllowedTopologies = append(out.AllowedTopologies, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		case "mountOptions":
			if in.IsNull() {
				in.Skip()
				out.MountOptions = nil
			} else {
				in.Delim('[')
				if out.MountOptions == nil {
					if !in.IsDelim(']') {
						out.MountOptions = make([]string, 0, 4)
					} else {
						out.MountOptions = []string{}
					}
				} else {
					out.MountOptions = (out.MountOptions)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.MountOptions = append(out.MountOptions, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parameters":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Parameters = make(map[string]string)
				} else {
					out.Parameters = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 string
					v3 = string(in.String())
					(out.Parameters)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "provisioner":
			if in.IsNull() {
				in.Skip()
				out.Provisioner = nil
			} else {
				if out.Provisioner == nil {
					out.Provisioner = new(string)
				}
				*out.Provisioner = string(in.String())
			}
		case "reclaimPolicy":
			out.ReclaimPolicy = string(in.String())
		case "volumeBindingMode":
			out.VolumeBindingMode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd5e2e24EncodeGithubComKubewardenK8sObjectsApiStorageV1(out *jwriter.Writer, in StorageClass) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AllowVolumeExpansion {
		const prefix string = ",\"allowVolumeExpansion\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.AllowVolumeExpansion))
	}
	{
		const prefix string = ",\"allowedTopologies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AllowedTopologies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.AllowedTopologies {
				if v4 > 0 {
					out.RawByte(',')
				}
				(v5).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		out.RawString(prefix)
		out.String(string(in.APIVersion))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	if true {
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		(in.Metadata).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"mountOptions\":"
		out.RawString(prefix)
		if in.MountOptions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.MountOptions {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	if len(in.Parameters) != 0 {
		const prefix string = ",\"parameters\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Parameters {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				out.String(string(v8Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"provisioner\":"
		out.RawString(prefix)
		if in.Provisioner == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Provisioner))
		}
	}
	if in.ReclaimPolicy != "" {
		const prefix string = ",\"reclaimPolicy\":"
		out.RawString(prefix)
		out.String(string(in.ReclaimPolicy))
	}
	if in.VolumeBindingMode != "" {
		const prefix string = ",\"volumeBindingMode\":"
		out.RawString(prefix)
		out.String(string(in.VolumeBindingMode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StorageClass) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd5e2e24EncodeGithubComKubewardenK8sObjectsApiStorageV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StorageClass) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd5e2e24EncodeGithubComKubewardenK8sObjectsApiStorageV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StorageClass) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd5e2e24DecodeGithubComKubewardenK8sObjectsApiStorageV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StorageClass) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd5e2e24DecodeGithubComKubewardenK8sObjectsApiStorageV1(l, v)
}
