// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"
	_v1 "github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonAe15a9caDecodeGithubComKubewardenK8sObjectsApiPolicyV1beta1(in *jlexer.Lexer, out *PodDisruptionBudgetStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "conditions":
			if in.IsNull() {
				in.Skip()
				out.Conditions = nil
			} else {
				in.Delim('[')
				if out.Conditions == nil {
					if !in.IsDelim(']') {
						out.Conditions = make([]_v1.Condition, 0, 1)
					} else {
						out.Conditions = []_v1.Condition{}
					}
				} else {
					out.Conditions = (out.Conditions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 _v1.Condition
					(v1).UnmarshalEasyJSON(in)
					out.Conditions = append(out.Conditions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "currentHealthy":
			if in.IsNull() {
				in.Skip()
				out.CurrentHealthy = nil
			} else {
				if out.CurrentHealthy == nil {
					out.CurrentHealthy = new(int32)
				}
				*out.CurrentHealthy = int32(in.Int32())
			}
		case "desiredHealthy":
			if in.IsNull() {
				in.Skip()
				out.DesiredHealthy = nil
			} else {
				if out.DesiredHealthy == nil {
					out.DesiredHealthy = new(int32)
				}
				*out.DesiredHealthy = int32(in.Int32())
			}
		case "disruptedPods":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.DisruptedPods = make(map[string]_v1.Time)
				} else {
					out.DisruptedPods = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 _v1.Time
					if data := in.Raw(); in.Ok() {
						in.AddError((v2).UnmarshalJSON(data))
					}
					(out.DisruptedPods)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "disruptionsAllowed":
			if in.IsNull() {
				in.Skip()
				out.DisruptionsAllowed = nil
			} else {
				if out.DisruptionsAllowed == nil {
					out.DisruptionsAllowed = new(int32)
				}
				*out.DisruptionsAllowed = int32(in.Int32())
			}
		case "expectedPods":
			if in.IsNull() {
				in.Skip()
				out.ExpectedPods = nil
			} else {
				if out.ExpectedPods == nil {
					out.ExpectedPods = new(int32)
				}
				*out.ExpectedPods = int32(in.Int32())
			}
		case "observedGeneration":
			out.ObservedGeneration = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAe15a9caEncodeGithubComKubewardenK8sObjectsApiPolicyV1beta1(out *jwriter.Writer, in PodDisruptionBudgetStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"conditions\":"
		out.RawString(prefix[1:])
		if in.Conditions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Conditions {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"currentHealthy\":"
		out.RawString(prefix)
		if in.CurrentHealthy == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.CurrentHealthy))
		}
	}
	{
		const prefix string = ",\"desiredHealthy\":"
		out.RawString(prefix)
		if in.DesiredHealthy == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.DesiredHealthy))
		}
	}
	if len(in.DisruptedPods) != 0 {
		const prefix string = ",\"disruptedPods\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.DisruptedPods {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.Raw((v5Value).MarshalJSON())
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"disruptionsAllowed\":"
		out.RawString(prefix)
		if in.DisruptionsAllowed == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.DisruptionsAllowed))
		}
	}
	{
		const prefix string = ",\"expectedPods\":"
		out.RawString(prefix)
		if in.ExpectedPods == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.ExpectedPods))
		}
	}
	if in.ObservedGeneration != 0 {
		const prefix string = ",\"observedGeneration\":"
		out.RawString(prefix)
		out.Int64(int64(in.ObservedGeneration))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PodDisruptionBudgetStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAe15a9caEncodeGithubComKubewardenK8sObjectsApiPolicyV1beta1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PodDisruptionBudgetStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAe15a9caEncodeGithubComKubewardenK8sObjectsApiPolicyV1beta1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PodDisruptionBudgetStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAe15a9caDecodeGithubComKubewardenK8sObjectsApiPolicyV1beta1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PodDisruptionBudgetStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAe15a9caDecodeGithubComKubewardenK8sObjectsApiPolicyV1beta1(l, v)
}
