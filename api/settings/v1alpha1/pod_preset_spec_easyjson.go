// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"
	_v1 "github.com/kubewarden/k8s-objects/api/core/v1"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson66ec238bDecodeGithubComKubewardenK8sObjectsApiSettingsV1alpha1(in *jlexer.Lexer, out *PodPresetSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "env":
			if in.IsNull() {
				in.Skip()
				out.Env = nil
			} else {
				in.Delim('[')
				if out.Env == nil {
					if !in.IsDelim(']') {
						out.Env = make([]_v1.EnvVar, 0, 2)
					} else {
						out.Env = []_v1.EnvVar{}
					}
				} else {
					out.Env = (out.Env)[:0]
				}
				for !in.IsDelim(']') {
					var v1 _v1.EnvVar
					(v1).UnmarshalEasyJSON(in)
					out.Env = append(out.Env, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "envFrom":
			if in.IsNull() {
				in.Skip()
				out.EnvFrom = nil
			} else {
				in.Delim('[')
				if out.EnvFrom == nil {
					if !in.IsDelim(']') {
						out.EnvFrom = make([]_v1.EnvFromSource, 0, 2)
					} else {
						out.EnvFrom = []_v1.EnvFromSource{}
					}
				} else {
					out.EnvFrom = (out.EnvFrom)[:0]
				}
				for !in.IsDelim(']') {
					var v2 _v1.EnvFromSource
					(v2).UnmarshalEasyJSON(in)
					out.EnvFrom = append(out.EnvFrom, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "selector":
			(out.Selector).UnmarshalEasyJSON(in)
		case "volumeMounts":
			if in.IsNull() {
				in.Skip()
				out.VolumeMounts = nil
			} else {
				in.Delim('[')
				if out.VolumeMounts == nil {
					if !in.IsDelim(']') {
						out.VolumeMounts = make([]_v1.VolumeMount, 0, 0)
					} else {
						out.VolumeMounts = []_v1.VolumeMount{}
					}
				} else {
					out.VolumeMounts = (out.VolumeMounts)[:0]
				}
				for !in.IsDelim(']') {
					var v3 _v1.VolumeMount
					(v3).UnmarshalEasyJSON(in)
					out.VolumeMounts = append(out.VolumeMounts, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "volumes":
			if in.IsNull() {
				in.Skip()
				out.Volumes = nil
			} else {
				in.Delim('[')
				if out.Volumes == nil {
					if !in.IsDelim(']') {
						out.Volumes = make([]_v1.Volume, 0, 0)
					} else {
						out.Volumes = []_v1.Volume{}
					}
				} else {
					out.Volumes = (out.Volumes)[:0]
				}
				for !in.IsDelim(']') {
					var v4 _v1.Volume
					(v4).UnmarshalEasyJSON(in)
					out.Volumes = append(out.Volumes, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66ec238bEncodeGithubComKubewardenK8sObjectsApiSettingsV1alpha1(out *jwriter.Writer, in PodPresetSpec) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"env\":"
		out.RawString(prefix[1:])
		if in.Env == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Env {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"envFrom\":"
		out.RawString(prefix)
		if in.EnvFrom == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.EnvFrom {
				if v7 > 0 {
					out.RawByte(',')
				}
				(v8).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"selector\":"
		out.RawString(prefix)
		(in.Selector).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"volumeMounts\":"
		out.RawString(prefix)
		if in.VolumeMounts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.VolumeMounts {
				if v9 > 0 {
					out.RawByte(',')
				}
				(v10).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"volumes\":"
		out.RawString(prefix)
		if in.Volumes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Volumes {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PodPresetSpec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66ec238bEncodeGithubComKubewardenK8sObjectsApiSettingsV1alpha1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PodPresetSpec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66ec238bEncodeGithubComKubewardenK8sObjectsApiSettingsV1alpha1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PodPresetSpec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66ec238bDecodeGithubComKubewardenK8sObjectsApiSettingsV1alpha1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PodPresetSpec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66ec238bDecodeGithubComKubewardenK8sObjectsApiSettingsV1alpha1(l, v)
}
