// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"
	_v11 "github.com/kubewarden/k8s-objects/api/core/v1"
	_v1 "github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1a7b9c7dDecodeGithubComKubewardenK8sObjectsApiSettingsV1alpha1(in *jlexer.Lexer, out *PodPreset) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(_v1.ObjectMeta)
				}
				(*out.Metadata).UnmarshalEasyJSON(in)
			}
		case "spec":
			if in.IsNull() {
				in.Skip()
				out.Spec = nil
			} else {
				if out.Spec == nil {
					out.Spec = new(PodPresetSpec)
				}
				easyjson1a7b9c7dDecodeGithubComKubewardenK8sObjectsApiSettingsV1alpha11(in, out.Spec)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a7b9c7dEncodeGithubComKubewardenK8sObjectsApiSettingsV1alpha1(out *jwriter.Writer, in PodPreset) {
	out.RawByte('{')
	first := true
	_ = first
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Metadata != nil {
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Metadata).MarshalEasyJSON(out)
	}
	if in.Spec != nil {
		const prefix string = ",\"spec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson1a7b9c7dEncodeGithubComKubewardenK8sObjectsApiSettingsV1alpha11(out, *in.Spec)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PodPreset) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a7b9c7dEncodeGithubComKubewardenK8sObjectsApiSettingsV1alpha1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PodPreset) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a7b9c7dEncodeGithubComKubewardenK8sObjectsApiSettingsV1alpha1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PodPreset) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a7b9c7dDecodeGithubComKubewardenK8sObjectsApiSettingsV1alpha1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PodPreset) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a7b9c7dDecodeGithubComKubewardenK8sObjectsApiSettingsV1alpha1(l, v)
}
func easyjson1a7b9c7dDecodeGithubComKubewardenK8sObjectsApiSettingsV1alpha11(in *jlexer.Lexer, out *PodPresetSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "env":
			if in.IsNull() {
				in.Skip()
				out.Env = nil
			} else {
				in.Delim('[')
				if out.Env == nil {
					if !in.IsDelim(']') {
						out.Env = make([]*_v11.EnvVar, 0, 8)
					} else {
						out.Env = []*_v11.EnvVar{}
					}
				} else {
					out.Env = (out.Env)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *_v11.EnvVar
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(_v11.EnvVar)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Env = append(out.Env, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "envFrom":
			if in.IsNull() {
				in.Skip()
				out.EnvFrom = nil
			} else {
				in.Delim('[')
				if out.EnvFrom == nil {
					if !in.IsDelim(']') {
						out.EnvFrom = make([]*_v11.EnvFromSource, 0, 8)
					} else {
						out.EnvFrom = []*_v11.EnvFromSource{}
					}
				} else {
					out.EnvFrom = (out.EnvFrom)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *_v11.EnvFromSource
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(_v11.EnvFromSource)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					out.EnvFrom = append(out.EnvFrom, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "selector":
			if in.IsNull() {
				in.Skip()
				out.Selector = nil
			} else {
				if out.Selector == nil {
					out.Selector = new(_v1.LabelSelector)
				}
				(*out.Selector).UnmarshalEasyJSON(in)
			}
		case "volumeMounts":
			if in.IsNull() {
				in.Skip()
				out.VolumeMounts = nil
			} else {
				in.Delim('[')
				if out.VolumeMounts == nil {
					if !in.IsDelim(']') {
						out.VolumeMounts = make([]*_v11.VolumeMount, 0, 8)
					} else {
						out.VolumeMounts = []*_v11.VolumeMount{}
					}
				} else {
					out.VolumeMounts = (out.VolumeMounts)[:0]
				}
				for !in.IsDelim(']') {
					var v3 *_v11.VolumeMount
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(_v11.VolumeMount)
						}
						(*v3).UnmarshalEasyJSON(in)
					}
					out.VolumeMounts = append(out.VolumeMounts, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "volumes":
			if in.IsNull() {
				in.Skip()
				out.Volumes = nil
			} else {
				in.Delim('[')
				if out.Volumes == nil {
					if !in.IsDelim(']') {
						out.Volumes = make([]*_v11.Volume, 0, 8)
					} else {
						out.Volumes = []*_v11.Volume{}
					}
				} else {
					out.Volumes = (out.Volumes)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *_v11.Volume
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(_v11.Volume)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Volumes = append(out.Volumes, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a7b9c7dEncodeGithubComKubewardenK8sObjectsApiSettingsV1alpha11(out *jwriter.Writer, in PodPresetSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Env) != 0 {
		const prefix string = ",\"env\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v5, v6 := range in.Env {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.EnvFrom) != 0 {
		const prefix string = ",\"envFrom\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v7, v8 := range in.EnvFrom {
				if v7 > 0 {
					out.RawByte(',')
				}
				if v8 == nil {
					out.RawString("null")
				} else {
					(*v8).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Selector != nil {
		const prefix string = ",\"selector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Selector).MarshalEasyJSON(out)
	}
	if len(in.VolumeMounts) != 0 {
		const prefix string = ",\"volumeMounts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.VolumeMounts {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil {
					out.RawString("null")
				} else {
					(*v10).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Volumes) != 0 {
		const prefix string = ",\"volumes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.Volumes {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
