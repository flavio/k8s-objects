// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDb6d2716DecodeGithubComKubewardenK8sObjectsApiAuthorizationV1beta1(in *jlexer.Lexer, out *SubjectAccessReviewSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "extra":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Extra = make(map[string][]string)
				} else {
					out.Extra = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 []string
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						in.Delim('[')
						if v1 == nil {
							if !in.IsDelim(']') {
								v1 = make([]string, 0, 4)
							} else {
								v1 = []string{}
							}
						} else {
							v1 = (v1)[:0]
						}
						for !in.IsDelim(']') {
							var v2 string
							v2 = string(in.String())
							v1 = append(v1, v2)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Extra)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "group":
			if in.IsNull() {
				in.Skip()
				out.Group = nil
			} else {
				in.Delim('[')
				if out.Group == nil {
					if !in.IsDelim(']') {
						out.Group = make([]string, 0, 4)
					} else {
						out.Group = []string{}
					}
				} else {
					out.Group = (out.Group)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.Group = append(out.Group, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nonResourceAttributes":
			if in.IsNull() {
				in.Skip()
				out.NonResourceAttributes = nil
			} else {
				if out.NonResourceAttributes == nil {
					out.NonResourceAttributes = new(NonResourceAttributes)
				}
				(*out.NonResourceAttributes).UnmarshalEasyJSON(in)
			}
		case "resourceAttributes":
			if in.IsNull() {
				in.Skip()
				out.ResourceAttributes = nil
			} else {
				if out.ResourceAttributes == nil {
					out.ResourceAttributes = new(ResourceAttributes)
				}
				(*out.ResourceAttributes).UnmarshalEasyJSON(in)
			}
		case "uid":
			out.UID = string(in.String())
		case "user":
			out.User = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb6d2716EncodeGithubComKubewardenK8sObjectsApiAuthorizationV1beta1(out *jwriter.Writer, in SubjectAccessReviewSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Extra) != 0 {
		const prefix string = ",\"extra\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Extra {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				if v4Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v5, v6 := range v4Value {
						if v5 > 0 {
							out.RawByte(',')
						}
						out.String(string(v6))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Group) != 0 {
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v7, v8 := range in.Group {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	if in.NonResourceAttributes != nil {
		const prefix string = ",\"nonResourceAttributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NonResourceAttributes).MarshalEasyJSON(out)
	}
	if in.ResourceAttributes != nil {
		const prefix string = ",\"resourceAttributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ResourceAttributes).MarshalEasyJSON(out)
	}
	if in.UID != "" {
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.User))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubjectAccessReviewSpec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb6d2716EncodeGithubComKubewardenK8sObjectsApiAuthorizationV1beta1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubjectAccessReviewSpec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb6d2716EncodeGithubComKubewardenK8sObjectsApiAuthorizationV1beta1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubjectAccessReviewSpec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb6d2716DecodeGithubComKubewardenK8sObjectsApiAuthorizationV1beta1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubjectAccessReviewSpec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb6d2716DecodeGithubComKubewardenK8sObjectsApiAuthorizationV1beta1(l, v)
}
