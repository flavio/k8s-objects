// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	_v1 "github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson23e3e9dcDecodeGithubComKubewardenK8sObjectsApiAutoscalingV1(in *jlexer.Lexer, out *HorizontalPodAutoscaler) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(_v1.ObjectMeta)
				}
				(*out.Metadata).UnmarshalEasyJSON(in)
			}
		case "spec":
			if in.IsNull() {
				in.Skip()
				out.Spec = nil
			} else {
				if out.Spec == nil {
					out.Spec = new(HorizontalPodAutoscalerSpec)
				}
				easyjson23e3e9dcDecodeGithubComKubewardenK8sObjectsApiAutoscalingV11(in, out.Spec)
			}
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(HorizontalPodAutoscalerStatus)
				}
				easyjson23e3e9dcDecodeGithubComKubewardenK8sObjectsApiAutoscalingV12(in, out.Status)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson23e3e9dcEncodeGithubComKubewardenK8sObjectsApiAutoscalingV1(out *jwriter.Writer, in HorizontalPodAutoscaler) {
	out.RawByte('{')
	first := true
	_ = first
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Metadata != nil {
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Metadata).MarshalEasyJSON(out)
	}
	if in.Spec != nil {
		const prefix string = ",\"spec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson23e3e9dcEncodeGithubComKubewardenK8sObjectsApiAutoscalingV11(out, *in.Spec)
	}
	if in.Status != nil {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson23e3e9dcEncodeGithubComKubewardenK8sObjectsApiAutoscalingV12(out, *in.Status)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HorizontalPodAutoscaler) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson23e3e9dcEncodeGithubComKubewardenK8sObjectsApiAutoscalingV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HorizontalPodAutoscaler) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson23e3e9dcEncodeGithubComKubewardenK8sObjectsApiAutoscalingV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HorizontalPodAutoscaler) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson23e3e9dcDecodeGithubComKubewardenK8sObjectsApiAutoscalingV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HorizontalPodAutoscaler) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson23e3e9dcDecodeGithubComKubewardenK8sObjectsApiAutoscalingV1(l, v)
}
func easyjson23e3e9dcDecodeGithubComKubewardenK8sObjectsApiAutoscalingV12(in *jlexer.Lexer, out *HorizontalPodAutoscalerStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currentCPUUtilizationPercentage":
			out.CurrentCPUUtilizationPercentage = int32(in.Int32())
		case "currentReplicas":
			if in.IsNull() {
				in.Skip()
				out.CurrentReplicas = nil
			} else {
				if out.CurrentReplicas == nil {
					out.CurrentReplicas = new(int32)
				}
				*out.CurrentReplicas = int32(in.Int32())
			}
		case "desiredReplicas":
			if in.IsNull() {
				in.Skip()
				out.DesiredReplicas = nil
			} else {
				if out.DesiredReplicas == nil {
					out.DesiredReplicas = new(int32)
				}
				*out.DesiredReplicas = int32(in.Int32())
			}
		case "lastScaleTime":
			if in.IsNull() {
				in.Skip()
				out.LastScaleTime = nil
			} else {
				if out.LastScaleTime == nil {
					out.LastScaleTime = new(_v1.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LastScaleTime).UnmarshalJSON(data))
				}
			}
		case "observedGeneration":
			out.ObservedGeneration = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson23e3e9dcEncodeGithubComKubewardenK8sObjectsApiAutoscalingV12(out *jwriter.Writer, in HorizontalPodAutoscalerStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CurrentCPUUtilizationPercentage != 0 {
		const prefix string = ",\"currentCPUUtilizationPercentage\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.CurrentCPUUtilizationPercentage))
	}
	{
		const prefix string = ",\"currentReplicas\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CurrentReplicas == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.CurrentReplicas))
		}
	}
	{
		const prefix string = ",\"desiredReplicas\":"
		out.RawString(prefix)
		if in.DesiredReplicas == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.DesiredReplicas))
		}
	}
	if in.LastScaleTime != nil {
		const prefix string = ",\"lastScaleTime\":"
		out.RawString(prefix)
		out.Raw((*in.LastScaleTime).MarshalJSON())
	}
	if in.ObservedGeneration != 0 {
		const prefix string = ",\"observedGeneration\":"
		out.RawString(prefix)
		out.Int64(int64(in.ObservedGeneration))
	}
	out.RawByte('}')
}
func easyjson23e3e9dcDecodeGithubComKubewardenK8sObjectsApiAutoscalingV11(in *jlexer.Lexer, out *HorizontalPodAutoscalerSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "maxReplicas":
			if in.IsNull() {
				in.Skip()
				out.MaxReplicas = nil
			} else {
				if out.MaxReplicas == nil {
					out.MaxReplicas = new(int32)
				}
				*out.MaxReplicas = int32(in.Int32())
			}
		case "minReplicas":
			out.MinReplicas = int32(in.Int32())
		case "scaleTargetRef":
			if in.IsNull() {
				in.Skip()
				out.ScaleTargetRef = nil
			} else {
				if out.ScaleTargetRef == nil {
					out.ScaleTargetRef = new(CrossVersionObjectReference)
				}
				(*out.ScaleTargetRef).UnmarshalEasyJSON(in)
			}
		case "targetCPUUtilizationPercentage":
			out.TargetCPUUtilizationPercentage = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson23e3e9dcEncodeGithubComKubewardenK8sObjectsApiAutoscalingV11(out *jwriter.Writer, in HorizontalPodAutoscalerSpec) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"maxReplicas\":"
		out.RawString(prefix[1:])
		if in.MaxReplicas == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.MaxReplicas))
		}
	}
	if in.MinReplicas != 0 {
		const prefix string = ",\"minReplicas\":"
		out.RawString(prefix)
		out.Int32(int32(in.MinReplicas))
	}
	{
		const prefix string = ",\"scaleTargetRef\":"
		out.RawString(prefix)
		if in.ScaleTargetRef == nil {
			out.RawString("null")
		} else {
			(*in.ScaleTargetRef).MarshalEasyJSON(out)
		}
	}
	if in.TargetCPUUtilizationPercentage != 0 {
		const prefix string = ",\"targetCPUUtilizationPercentage\":"
		out.RawString(prefix)
		out.Int32(int32(in.TargetCPUUtilizationPercentage))
	}
	out.RawByte('}')
}
