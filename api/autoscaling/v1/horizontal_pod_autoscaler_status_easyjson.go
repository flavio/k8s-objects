// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	_v1 "github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4e8edfcfDecodeGithubComKubewardenK8sObjectsApiAutoscalingV1(in *jlexer.Lexer, out *HorizontalPodAutoscalerStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currentCPUUtilizationPercentage":
			out.CurrentCPUUtilizationPercentage = int32(in.Int32())
		case "currentReplicas":
			if in.IsNull() {
				in.Skip()
				out.CurrentReplicas = nil
			} else {
				if out.CurrentReplicas == nil {
					out.CurrentReplicas = new(int32)
				}
				*out.CurrentReplicas = int32(in.Int32())
			}
		case "desiredReplicas":
			if in.IsNull() {
				in.Skip()
				out.DesiredReplicas = nil
			} else {
				if out.DesiredReplicas == nil {
					out.DesiredReplicas = new(int32)
				}
				*out.DesiredReplicas = int32(in.Int32())
			}
		case "lastScaleTime":
			if in.IsNull() {
				in.Skip()
				out.LastScaleTime = nil
			} else {
				if out.LastScaleTime == nil {
					out.LastScaleTime = new(_v1.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LastScaleTime).UnmarshalJSON(data))
				}
			}
		case "observedGeneration":
			out.ObservedGeneration = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4e8edfcfEncodeGithubComKubewardenK8sObjectsApiAutoscalingV1(out *jwriter.Writer, in HorizontalPodAutoscalerStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CurrentCPUUtilizationPercentage != 0 {
		const prefix string = ",\"currentCPUUtilizationPercentage\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.CurrentCPUUtilizationPercentage))
	}
	{
		const prefix string = ",\"currentReplicas\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CurrentReplicas == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.CurrentReplicas))
		}
	}
	{
		const prefix string = ",\"desiredReplicas\":"
		out.RawString(prefix)
		if in.DesiredReplicas == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.DesiredReplicas))
		}
	}
	if in.LastScaleTime != nil {
		const prefix string = ",\"lastScaleTime\":"
		out.RawString(prefix)
		out.Raw((*in.LastScaleTime).MarshalJSON())
	}
	if in.ObservedGeneration != 0 {
		const prefix string = ",\"observedGeneration\":"
		out.RawString(prefix)
		out.Int64(int64(in.ObservedGeneration))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HorizontalPodAutoscalerStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4e8edfcfEncodeGithubComKubewardenK8sObjectsApiAutoscalingV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HorizontalPodAutoscalerStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4e8edfcfEncodeGithubComKubewardenK8sObjectsApiAutoscalingV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HorizontalPodAutoscalerStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4e8edfcfDecodeGithubComKubewardenK8sObjectsApiAutoscalingV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HorizontalPodAutoscalerStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4e8edfcfDecodeGithubComKubewardenK8sObjectsApiAutoscalingV1(l, v)
}
