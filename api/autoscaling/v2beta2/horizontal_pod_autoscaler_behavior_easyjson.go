// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v2beta2

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBdb0baa7DecodeGithubComKubewardenK8sObjectsApiAutoscalingV2beta2(in *jlexer.Lexer, out *HorizontalPodAutoscalerBehavior) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "scaleDown":
			if in.IsNull() {
				in.Skip()
				out.ScaleDown = nil
			} else {
				if out.ScaleDown == nil {
					out.ScaleDown = new(HPAScalingRules)
				}
				easyjsonBdb0baa7DecodeGithubComKubewardenK8sObjectsApiAutoscalingV2beta21(in, out.ScaleDown)
			}
		case "scaleUp":
			if in.IsNull() {
				in.Skip()
				out.ScaleUp = nil
			} else {
				if out.ScaleUp == nil {
					out.ScaleUp = new(HPAScalingRules)
				}
				easyjsonBdb0baa7DecodeGithubComKubewardenK8sObjectsApiAutoscalingV2beta21(in, out.ScaleUp)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBdb0baa7EncodeGithubComKubewardenK8sObjectsApiAutoscalingV2beta2(out *jwriter.Writer, in HorizontalPodAutoscalerBehavior) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ScaleDown != nil {
		const prefix string = ",\"scaleDown\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonBdb0baa7EncodeGithubComKubewardenK8sObjectsApiAutoscalingV2beta21(out, *in.ScaleDown)
	}
	if in.ScaleUp != nil {
		const prefix string = ",\"scaleUp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonBdb0baa7EncodeGithubComKubewardenK8sObjectsApiAutoscalingV2beta21(out, *in.ScaleUp)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HorizontalPodAutoscalerBehavior) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBdb0baa7EncodeGithubComKubewardenK8sObjectsApiAutoscalingV2beta2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HorizontalPodAutoscalerBehavior) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBdb0baa7EncodeGithubComKubewardenK8sObjectsApiAutoscalingV2beta2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HorizontalPodAutoscalerBehavior) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBdb0baa7DecodeGithubComKubewardenK8sObjectsApiAutoscalingV2beta2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HorizontalPodAutoscalerBehavior) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBdb0baa7DecodeGithubComKubewardenK8sObjectsApiAutoscalingV2beta2(l, v)
}
func easyjsonBdb0baa7DecodeGithubComKubewardenK8sObjectsApiAutoscalingV2beta21(in *jlexer.Lexer, out *HPAScalingRules) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "policies":
			if in.IsNull() {
				in.Skip()
				out.Policies = nil
			} else {
				in.Delim('[')
				if out.Policies == nil {
					if !in.IsDelim(']') {
						out.Policies = make([]*HPAScalingPolicy, 0, 8)
					} else {
						out.Policies = []*HPAScalingPolicy{}
					}
				} else {
					out.Policies = (out.Policies)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *HPAScalingPolicy
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(HPAScalingPolicy)
						}
						easyjsonBdb0baa7DecodeGithubComKubewardenK8sObjectsApiAutoscalingV2beta22(in, v1)
					}
					out.Policies = append(out.Policies, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "selectPolicy":
			out.SelectPolicy = string(in.String())
		case "stabilizationWindowSeconds":
			out.StabilizationWindowSeconds = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBdb0baa7EncodeGithubComKubewardenK8sObjectsApiAutoscalingV2beta21(out *jwriter.Writer, in HPAScalingRules) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Policies) != 0 {
		const prefix string = ",\"policies\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.Policies {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					easyjsonBdb0baa7EncodeGithubComKubewardenK8sObjectsApiAutoscalingV2beta22(out, *v3)
				}
			}
			out.RawByte(']')
		}
	}
	if in.SelectPolicy != "" {
		const prefix string = ",\"selectPolicy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SelectPolicy))
	}
	if in.StabilizationWindowSeconds != 0 {
		const prefix string = ",\"stabilizationWindowSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.StabilizationWindowSeconds))
	}
	out.RawByte('}')
}
func easyjsonBdb0baa7DecodeGithubComKubewardenK8sObjectsApiAutoscalingV2beta22(in *jlexer.Lexer, out *HPAScalingPolicy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "periodSeconds":
			if in.IsNull() {
				in.Skip()
				out.PeriodSeconds = nil
			} else {
				if out.PeriodSeconds == nil {
					out.PeriodSeconds = new(int32)
				}
				*out.PeriodSeconds = int32(in.Int32())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(int32)
				}
				*out.Value = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBdb0baa7EncodeGithubComKubewardenK8sObjectsApiAutoscalingV2beta22(out *jwriter.Writer, in HPAScalingPolicy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"periodSeconds\":"
		out.RawString(prefix[1:])
		if in.PeriodSeconds == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.PeriodSeconds))
		}
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		if in.Type == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Type))
		}
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		if in.Value == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.Value))
		}
	}
	out.RawByte('}')
}
