// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1b6783e4DecodeGithubComKubewardenK8sObjectsApiCoreV1(in *jlexer.Lexer, out *NodeSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "configSource":
			if in.IsNull() {
				in.Skip()
				out.ConfigSource = nil
			} else {
				if out.ConfigSource == nil {
					out.ConfigSource = new(NodeConfigSource)
				}
				(*out.ConfigSource).UnmarshalEasyJSON(in)
			}
		case "externalID":
			out.ExternalID = string(in.String())
		case "podCIDR":
			out.PodCIDR = string(in.String())
		case "providerID":
			out.ProviderID = string(in.String())
		case "taints":
			if in.IsNull() {
				in.Skip()
				out.Taints = nil
			} else {
				in.Delim('[')
				if out.Taints == nil {
					if !in.IsDelim(']') {
						out.Taints = make([]*Taint, 0, 8)
					} else {
						out.Taints = []*Taint{}
					}
				} else {
					out.Taints = (out.Taints)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Taint
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Taint)
						}
						easyjson1b6783e4DecodeGithubComKubewardenK8sObjectsApiCoreV11(in, v1)
					}
					out.Taints = append(out.Taints, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unschedulable":
			out.Unschedulable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b6783e4EncodeGithubComKubewardenK8sObjectsApiCoreV1(out *jwriter.Writer, in NodeSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ConfigSource != nil {
		const prefix string = ",\"configSource\":"
		first = false
		out.RawString(prefix[1:])
		(*in.ConfigSource).MarshalEasyJSON(out)
	}
	if in.ExternalID != "" {
		const prefix string = ",\"externalID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExternalID))
	}
	if in.PodCIDR != "" {
		const prefix string = ",\"podCIDR\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PodCIDR))
	}
	if in.ProviderID != "" {
		const prefix string = ",\"providerID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProviderID))
	}
	{
		const prefix string = ",\"taints\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Taints == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Taints {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					easyjson1b6783e4EncodeGithubComKubewardenK8sObjectsApiCoreV11(out, *v3)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Unschedulable {
		const prefix string = ",\"unschedulable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Unschedulable))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NodeSpec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b6783e4EncodeGithubComKubewardenK8sObjectsApiCoreV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NodeSpec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b6783e4EncodeGithubComKubewardenK8sObjectsApiCoreV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NodeSpec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b6783e4DecodeGithubComKubewardenK8sObjectsApiCoreV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NodeSpec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b6783e4DecodeGithubComKubewardenK8sObjectsApiCoreV1(l, v)
}
func easyjson1b6783e4DecodeGithubComKubewardenK8sObjectsApiCoreV11(in *jlexer.Lexer, out *Taint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "effect":
			if in.IsNull() {
				in.Skip()
				out.Effect = nil
			} else {
				if out.Effect == nil {
					out.Effect = new(string)
				}
				*out.Effect = string(in.String())
			}
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		case "timeAdded":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeAdded).UnmarshalJSON(data))
			}
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b6783e4EncodeGithubComKubewardenK8sObjectsApiCoreV11(out *jwriter.Writer, in Taint) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"effect\":"
		out.RawString(prefix[1:])
		if in.Effect == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Effect))
		}
	}
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix)
		if in.Key == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Key))
		}
	}
	if true {
		const prefix string = ",\"timeAdded\":"
		out.RawString(prefix)
		out.Raw((in.TimeAdded).MarshalJSON())
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
