// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	resource "github.com/kubewarden/k8s-objects/apimachinery/pkg/api/resource"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBf55bb0eDecodeGithubComKubewardenK8sObjectsApiCoreV1(in *jlexer.Lexer, out *PersistentVolumeClaimStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accessModes":
			if in.IsNull() {
				in.Skip()
				out.AccessModes = nil
			} else {
				in.Delim('[')
				if out.AccessModes == nil {
					if !in.IsDelim(']') {
						out.AccessModes = make([]string, 0, 4)
					} else {
						out.AccessModes = []string{}
					}
				} else {
					out.AccessModes = (out.AccessModes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.AccessModes = append(out.AccessModes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "capacity":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Capacity = make(map[string]*resource.Quantity)
				} else {
					out.Capacity = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 *resource.Quantity
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(resource.Quantity)
						}
						*v2 = resource.Quantity(in.String())
					}
					(out.Capacity)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "conditions":
			if in.IsNull() {
				in.Skip()
				out.Conditions = nil
			} else {
				in.Delim('[')
				if out.Conditions == nil {
					if !in.IsDelim(']') {
						out.Conditions = make([]*PersistentVolumeClaimCondition, 0, 8)
					} else {
						out.Conditions = []*PersistentVolumeClaimCondition{}
					}
				} else {
					out.Conditions = (out.Conditions)[:0]
				}
				for !in.IsDelim(']') {
					var v3 *PersistentVolumeClaimCondition
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(PersistentVolumeClaimCondition)
						}
						(*v3).UnmarshalEasyJSON(in)
					}
					out.Conditions = append(out.Conditions, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "phase":
			out.Phase = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBf55bb0eEncodeGithubComKubewardenK8sObjectsApiCoreV1(out *jwriter.Writer, in PersistentVolumeClaimStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.AccessModes) != 0 {
		const prefix string = ",\"accessModes\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v4, v5 := range in.AccessModes {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	if len(in.Capacity) != 0 {
		const prefix string = ",\"capacity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Capacity {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				if v6Value == nil {
					out.RawString("null")
				} else {
					out.String(string(*v6Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Conditions) != 0 {
		const prefix string = ",\"conditions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v7, v8 := range in.Conditions {
				if v7 > 0 {
					out.RawByte(',')
				}
				if v8 == nil {
					out.RawString("null")
				} else {
					(*v8).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Phase != "" {
		const prefix string = ",\"phase\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Phase))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PersistentVolumeClaimStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBf55bb0eEncodeGithubComKubewardenK8sObjectsApiCoreV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PersistentVolumeClaimStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBf55bb0eEncodeGithubComKubewardenK8sObjectsApiCoreV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PersistentVolumeClaimStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBf55bb0eDecodeGithubComKubewardenK8sObjectsApiCoreV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PersistentVolumeClaimStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBf55bb0eDecodeGithubComKubewardenK8sObjectsApiCoreV1(l, v)
}
