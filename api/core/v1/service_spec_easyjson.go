// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9d06a251DecodeGithubComKubewardenK8sObjectsApiCoreV1(in *jlexer.Lexer, out *ServiceSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clusterIP":
			out.ClusterIP = string(in.String())
		case "externalIPs":
			if in.IsNull() {
				in.Skip()
				out.ExternalIPs = nil
			} else {
				in.Delim('[')
				if out.ExternalIPs == nil {
					if !in.IsDelim(']') {
						out.ExternalIPs = make([]string, 0, 4)
					} else {
						out.ExternalIPs = []string{}
					}
				} else {
					out.ExternalIPs = (out.ExternalIPs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.ExternalIPs = append(out.ExternalIPs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "externalName":
			out.ExternalName = string(in.String())
		case "externalTrafficPolicy":
			out.ExternalTrafficPolicy = string(in.String())
		case "healthCheckNodePort":
			out.HealthCheckNodePort = int32(in.Int32())
		case "ipFamily":
			out.IPFamily = string(in.String())
		case "loadBalancerIP":
			out.LoadBalancerIP = string(in.String())
		case "loadBalancerSourceRanges":
			if in.IsNull() {
				in.Skip()
				out.LoadBalancerSourceRanges = nil
			} else {
				in.Delim('[')
				if out.LoadBalancerSourceRanges == nil {
					if !in.IsDelim(']') {
						out.LoadBalancerSourceRanges = make([]string, 0, 4)
					} else {
						out.LoadBalancerSourceRanges = []string{}
					}
				} else {
					out.LoadBalancerSourceRanges = (out.LoadBalancerSourceRanges)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.LoadBalancerSourceRanges = append(out.LoadBalancerSourceRanges, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ports":
			if in.IsNull() {
				in.Skip()
				out.Ports = nil
			} else {
				in.Delim('[')
				if out.Ports == nil {
					if !in.IsDelim(']') {
						out.Ports = make([]*ServicePort, 0, 8)
					} else {
						out.Ports = []*ServicePort{}
					}
				} else {
					out.Ports = (out.Ports)[:0]
				}
				for !in.IsDelim(']') {
					var v3 *ServicePort
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(ServicePort)
						}
						(*v3).UnmarshalEasyJSON(in)
					}
					out.Ports = append(out.Ports, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "publishNotReadyAddresses":
			out.PublishNotReadyAddresses = bool(in.Bool())
		case "selector":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Selector = make(map[string]string)
				} else {
					out.Selector = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 string
					v4 = string(in.String())
					(out.Selector)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "sessionAffinity":
			out.SessionAffinity = string(in.String())
		case "sessionAffinityConfig":
			if in.IsNull() {
				in.Skip()
				out.SessionAffinityConfig = nil
			} else {
				if out.SessionAffinityConfig == nil {
					out.SessionAffinityConfig = new(SessionAffinityConfig)
				}
				easyjson9d06a251DecodeGithubComKubewardenK8sObjectsApiCoreV11(in, out.SessionAffinityConfig)
			}
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d06a251EncodeGithubComKubewardenK8sObjectsApiCoreV1(out *jwriter.Writer, in ServiceSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ClusterIP != "" {
		const prefix string = ",\"clusterIP\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ClusterIP))
	}
	{
		const prefix string = ",\"externalIPs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ExternalIPs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.ExternalIPs {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if in.ExternalName != "" {
		const prefix string = ",\"externalName\":"
		out.RawString(prefix)
		out.String(string(in.ExternalName))
	}
	if in.ExternalTrafficPolicy != "" {
		const prefix string = ",\"externalTrafficPolicy\":"
		out.RawString(prefix)
		out.String(string(in.ExternalTrafficPolicy))
	}
	if in.HealthCheckNodePort != 0 {
		const prefix string = ",\"healthCheckNodePort\":"
		out.RawString(prefix)
		out.Int32(int32(in.HealthCheckNodePort))
	}
	if in.IPFamily != "" {
		const prefix string = ",\"ipFamily\":"
		out.RawString(prefix)
		out.String(string(in.IPFamily))
	}
	if in.LoadBalancerIP != "" {
		const prefix string = ",\"loadBalancerIP\":"
		out.RawString(prefix)
		out.String(string(in.LoadBalancerIP))
	}
	{
		const prefix string = ",\"loadBalancerSourceRanges\":"
		out.RawString(prefix)
		if in.LoadBalancerSourceRanges == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.LoadBalancerSourceRanges {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ports\":"
		out.RawString(prefix)
		if in.Ports == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Ports {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil {
					out.RawString("null")
				} else {
					(*v10).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.PublishNotReadyAddresses {
		const prefix string = ",\"publishNotReadyAddresses\":"
		out.RawString(prefix)
		out.Bool(bool(in.PublishNotReadyAddresses))
	}
	if len(in.Selector) != 0 {
		const prefix string = ",\"selector\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.Selector {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				out.String(string(v11Value))
			}
			out.RawByte('}')
		}
	}
	if in.SessionAffinity != "" {
		const prefix string = ",\"sessionAffinity\":"
		out.RawString(prefix)
		out.String(string(in.SessionAffinity))
	}
	if in.SessionAffinityConfig != nil {
		const prefix string = ",\"sessionAffinityConfig\":"
		out.RawString(prefix)
		easyjson9d06a251EncodeGithubComKubewardenK8sObjectsApiCoreV11(out, *in.SessionAffinityConfig)
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServiceSpec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d06a251EncodeGithubComKubewardenK8sObjectsApiCoreV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServiceSpec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d06a251EncodeGithubComKubewardenK8sObjectsApiCoreV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServiceSpec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d06a251DecodeGithubComKubewardenK8sObjectsApiCoreV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServiceSpec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d06a251DecodeGithubComKubewardenK8sObjectsApiCoreV1(l, v)
}
func easyjson9d06a251DecodeGithubComKubewardenK8sObjectsApiCoreV11(in *jlexer.Lexer, out *SessionAffinityConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clientIP":
			if in.IsNull() {
				in.Skip()
				out.ClientIP = nil
			} else {
				if out.ClientIP == nil {
					out.ClientIP = new(ClientIPConfig)
				}
				(*out.ClientIP).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d06a251EncodeGithubComKubewardenK8sObjectsApiCoreV11(out *jwriter.Writer, in SessionAffinityConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ClientIP != nil {
		const prefix string = ",\"clientIP\":"
		first = false
		out.RawString(prefix[1:])
		(*in.ClientIP).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
