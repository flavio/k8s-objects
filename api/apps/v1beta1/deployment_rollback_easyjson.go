// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBd965e3eDecodeGithubComKubewardenK8sObjectsApiAppsV1beta1(in *jlexer.Lexer, out *DeploymentRollback) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "rollbackTo":
			if in.IsNull() {
				in.Skip()
				out.RollbackTo = nil
			} else {
				if out.RollbackTo == nil {
					out.RollbackTo = new(RollbackConfig)
				}
				easyjsonBd965e3eDecodeGithubComKubewardenK8sObjectsApiAppsV1beta11(in, out.RollbackTo)
			}
		case "updatedAnnotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.UpdatedAnnotations = make(map[string]string)
				} else {
					out.UpdatedAnnotations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.UpdatedAnnotations)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd965e3eEncodeGithubComKubewardenK8sObjectsApiAppsV1beta1(out *jwriter.Writer, in DeploymentRollback) {
	out.RawByte('{')
	first := true
	_ = first
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"rollbackTo\":"
		out.RawString(prefix)
		if in.RollbackTo == nil {
			out.RawString("null")
		} else {
			easyjsonBd965e3eEncodeGithubComKubewardenK8sObjectsApiAppsV1beta11(out, *in.RollbackTo)
		}
	}
	if len(in.UpdatedAnnotations) != 0 {
		const prefix string = ",\"updatedAnnotations\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.UpdatedAnnotations {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				out.String(string(v2Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeploymentRollback) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd965e3eEncodeGithubComKubewardenK8sObjectsApiAppsV1beta1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeploymentRollback) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd965e3eEncodeGithubComKubewardenK8sObjectsApiAppsV1beta1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeploymentRollback) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd965e3eDecodeGithubComKubewardenK8sObjectsApiAppsV1beta1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeploymentRollback) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd965e3eDecodeGithubComKubewardenK8sObjectsApiAppsV1beta1(l, v)
}
func easyjsonBd965e3eDecodeGithubComKubewardenK8sObjectsApiAppsV1beta11(in *jlexer.Lexer, out *RollbackConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "revision":
			out.Revision = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd965e3eEncodeGithubComKubewardenK8sObjectsApiAppsV1beta11(out *jwriter.Writer, in RollbackConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Revision != 0 {
		const prefix string = ",\"revision\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Revision))
	}
	out.RawByte('}')
}
