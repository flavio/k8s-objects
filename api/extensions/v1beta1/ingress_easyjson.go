// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"
	intstr "github.com/kubewarden/k8s-objects/apimachinery/pkg/util/intstr"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiExtensionsV1beta1(in *jlexer.Lexer, out *Ingress) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		case "spec":
			if in.IsNull() {
				in.Skip()
				out.Spec = nil
			} else {
				if out.Spec == nil {
					out.Spec = new(IngressSpec)
				}
				easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiExtensionsV1beta11(in, out.Spec)
			}
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(IngressStatus)
				}
				easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiExtensionsV1beta12(in, out.Status)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiExtensionsV1beta1(out *jwriter.Writer, in Ingress) {
	out.RawByte('{')
	first := true
	_ = first
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if true {
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Metadata).MarshalEasyJSON(out)
	}
	if in.Spec != nil {
		const prefix string = ",\"spec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiExtensionsV1beta11(out, *in.Spec)
	}
	if in.Status != nil {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiExtensionsV1beta12(out, *in.Status)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Ingress) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiExtensionsV1beta1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ingress) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiExtensionsV1beta1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Ingress) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiExtensionsV1beta1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ingress) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiExtensionsV1beta1(l, v)
}
func easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiExtensionsV1beta12(in *jlexer.Lexer, out *IngressStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "loadBalancer":
			(out.LoadBalancer).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiExtensionsV1beta12(out *jwriter.Writer, in IngressStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"loadBalancer\":"
		first = false
		out.RawString(prefix[1:])
		(in.LoadBalancer).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiExtensionsV1beta11(in *jlexer.Lexer, out *IngressSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "backend":
			if in.IsNull() {
				in.Skip()
				out.Backend = nil
			} else {
				if out.Backend == nil {
					out.Backend = new(IngressBackend)
				}
				easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiExtensionsV1beta13(in, out.Backend)
			}
		case "ingressClassName":
			out.IngressClassName = string(in.String())
		case "rules":
			if in.IsNull() {
				in.Skip()
				out.Rules = nil
			} else {
				in.Delim('[')
				if out.Rules == nil {
					if !in.IsDelim(']') {
						out.Rules = make([]*IngressRule, 0, 8)
					} else {
						out.Rules = []*IngressRule{}
					}
				} else {
					out.Rules = (out.Rules)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *IngressRule
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(IngressRule)
						}
						easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiExtensionsV1beta14(in, v1)
					}
					out.Rules = append(out.Rules, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tls":
			if in.IsNull() {
				in.Skip()
				out.TLS = nil
			} else {
				in.Delim('[')
				if out.TLS == nil {
					if !in.IsDelim(']') {
						out.TLS = make([]*IngressTLS, 0, 8)
					} else {
						out.TLS = []*IngressTLS{}
					}
				} else {
					out.TLS = (out.TLS)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *IngressTLS
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(IngressTLS)
						}
						easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiExtensionsV1beta15(in, v2)
					}
					out.TLS = append(out.TLS, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiExtensionsV1beta11(out *jwriter.Writer, in IngressSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Backend != nil {
		const prefix string = ",\"backend\":"
		first = false
		out.RawString(prefix[1:])
		easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiExtensionsV1beta13(out, *in.Backend)
	}
	if in.IngressClassName != "" {
		const prefix string = ",\"ingressClassName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IngressClassName))
	}
	{
		const prefix string = ",\"rules\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Rules == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Rules {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiExtensionsV1beta14(out, *v4)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tls\":"
		out.RawString(prefix)
		if in.TLS == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.TLS {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiExtensionsV1beta15(out, *v6)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiExtensionsV1beta15(in *jlexer.Lexer, out *IngressTLS) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hosts":
			if in.IsNull() {
				in.Skip()
				out.Hosts = nil
			} else {
				in.Delim('[')
				if out.Hosts == nil {
					if !in.IsDelim(']') {
						out.Hosts = make([]string, 0, 4)
					} else {
						out.Hosts = []string{}
					}
				} else {
					out.Hosts = (out.Hosts)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Hosts = append(out.Hosts, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "secretName":
			out.SecretName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiExtensionsV1beta15(out *jwriter.Writer, in IngressTLS) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hosts\":"
		out.RawString(prefix[1:])
		if in.Hosts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Hosts {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if in.SecretName != "" {
		const prefix string = ",\"secretName\":"
		out.RawString(prefix)
		out.String(string(in.SecretName))
	}
	out.RawByte('}')
}
func easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiExtensionsV1beta14(in *jlexer.Lexer, out *IngressRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.Host = string(in.String())
		case "http":
			if in.IsNull() {
				in.Skip()
				out.HTTP = nil
			} else {
				if out.HTTP == nil {
					out.HTTP = new(HTTPIngressRuleValue)
				}
				(*out.HTTP).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiExtensionsV1beta14(out *jwriter.Writer, in IngressRule) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Host != "" {
		const prefix string = ",\"host\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Host))
	}
	if in.HTTP != nil {
		const prefix string = ",\"http\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.HTTP).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiExtensionsV1beta13(in *jlexer.Lexer, out *IngressBackend) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "resource":
			(out.Resource).UnmarshalEasyJSON(in)
		case "serviceName":
			out.ServiceName = string(in.String())
		case "servicePort":
			out.ServicePort = intstr.IntOrString(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiExtensionsV1beta13(out *jwriter.Writer, in IngressBackend) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"resource\":"
		first = false
		out.RawString(prefix[1:])
		(in.Resource).MarshalEasyJSON(out)
	}
	if in.ServiceName != "" {
		const prefix string = ",\"serviceName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ServiceName))
	}
	if in.ServicePort != "" {
		const prefix string = ",\"servicePort\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ServicePort))
	}
	out.RawByte('}')
}
