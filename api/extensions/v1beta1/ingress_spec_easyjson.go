// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCf23dc59DecodeGithubComKubewardenK8sObjectsApiExtensionsV1beta1(in *jlexer.Lexer, out *IngressSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "backend":
			if in.IsNull() {
				in.Skip()
				out.Backend = nil
			} else {
				if out.Backend == nil {
					out.Backend = new(IngressBackend)
				}
				(*out.Backend).UnmarshalEasyJSON(in)
			}
		case "rules":
			if in.IsNull() {
				in.Skip()
				out.Rules = nil
			} else {
				in.Delim('[')
				if out.Rules == nil {
					if !in.IsDelim(']') {
						out.Rules = make([]*IngressRule, 0, 8)
					} else {
						out.Rules = []*IngressRule{}
					}
				} else {
					out.Rules = (out.Rules)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *IngressRule
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(IngressRule)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Rules = append(out.Rules, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tls":
			if in.IsNull() {
				in.Skip()
				out.TLS = nil
			} else {
				in.Delim('[')
				if out.TLS == nil {
					if !in.IsDelim(']') {
						out.TLS = make([]*IngressTLS, 0, 8)
					} else {
						out.TLS = []*IngressTLS{}
					}
				} else {
					out.TLS = (out.TLS)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *IngressTLS
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(IngressTLS)
						}
						easyjsonCf23dc59DecodeGithubComKubewardenK8sObjectsApiExtensionsV1beta11(in, v2)
					}
					out.TLS = append(out.TLS, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCf23dc59EncodeGithubComKubewardenK8sObjectsApiExtensionsV1beta1(out *jwriter.Writer, in IngressSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Backend != nil {
		const prefix string = ",\"backend\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Backend).MarshalEasyJSON(out)
	}
	if len(in.Rules) != 0 {
		const prefix string = ",\"rules\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.Rules {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					(*v4).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.TLS) != 0 {
		const prefix string = ",\"tls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.TLS {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					easyjsonCf23dc59EncodeGithubComKubewardenK8sObjectsApiExtensionsV1beta11(out, *v6)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IngressSpec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCf23dc59EncodeGithubComKubewardenK8sObjectsApiExtensionsV1beta1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IngressSpec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCf23dc59EncodeGithubComKubewardenK8sObjectsApiExtensionsV1beta1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IngressSpec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCf23dc59DecodeGithubComKubewardenK8sObjectsApiExtensionsV1beta1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IngressSpec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCf23dc59DecodeGithubComKubewardenK8sObjectsApiExtensionsV1beta1(l, v)
}
func easyjsonCf23dc59DecodeGithubComKubewardenK8sObjectsApiExtensionsV1beta11(in *jlexer.Lexer, out *IngressTLS) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hosts":
			if in.IsNull() {
				in.Skip()
				out.Hosts = nil
			} else {
				in.Delim('[')
				if out.Hosts == nil {
					if !in.IsDelim(']') {
						out.Hosts = make([]string, 0, 4)
					} else {
						out.Hosts = []string{}
					}
				} else {
					out.Hosts = (out.Hosts)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Hosts = append(out.Hosts, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "secretName":
			out.SecretName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCf23dc59EncodeGithubComKubewardenK8sObjectsApiExtensionsV1beta11(out *jwriter.Writer, in IngressTLS) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Hosts) != 0 {
		const prefix string = ",\"hosts\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v8, v9 := range in.Hosts {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if in.SecretName != "" {
		const prefix string = ",\"secretName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SecretName))
	}
	out.RawByte('}')
}
