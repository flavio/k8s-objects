// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	_v11 "github.com/kubewarden/k8s-objects/api/core/v1"
	_v1 "github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV1(in *jlexer.Lexer, out *Ingress) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(_v1.ObjectMeta)
				}
				(*out.Metadata).UnmarshalEasyJSON(in)
			}
		case "spec":
			if in.IsNull() {
				in.Skip()
				out.Spec = nil
			} else {
				if out.Spec == nil {
					out.Spec = new(IngressSpec)
				}
				easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV11(in, out.Spec)
			}
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(IngressStatus)
				}
				easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV12(in, out.Status)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV1(out *jwriter.Writer, in Ingress) {
	out.RawByte('{')
	first := true
	_ = first
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Metadata != nil {
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Metadata).MarshalEasyJSON(out)
	}
	if in.Spec != nil {
		const prefix string = ",\"spec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV11(out, *in.Spec)
	}
	if in.Status != nil {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV12(out, *in.Status)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Ingress) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ingress) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Ingress) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ingress) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV1(l, v)
}
func easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV12(in *jlexer.Lexer, out *IngressStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "loadBalancer":
			if in.IsNull() {
				in.Skip()
				out.LoadBalancer = nil
			} else {
				if out.LoadBalancer == nil {
					out.LoadBalancer = new(IngressLoadBalancerStatus)
				}
				easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV13(in, out.LoadBalancer)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV12(out *jwriter.Writer, in IngressStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LoadBalancer != nil {
		const prefix string = ",\"loadBalancer\":"
		first = false
		out.RawString(prefix[1:])
		easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV13(out, *in.LoadBalancer)
	}
	out.RawByte('}')
}
func easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV13(in *jlexer.Lexer, out *IngressLoadBalancerStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ingress":
			if in.IsNull() {
				in.Skip()
				out.Ingress = nil
			} else {
				in.Delim('[')
				if out.Ingress == nil {
					if !in.IsDelim(']') {
						out.Ingress = make([]*IngressLoadBalancerIngress, 0, 8)
					} else {
						out.Ingress = []*IngressLoadBalancerIngress{}
					}
				} else {
					out.Ingress = (out.Ingress)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *IngressLoadBalancerIngress
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(IngressLoadBalancerIngress)
						}
						easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV14(in, v1)
					}
					out.Ingress = append(out.Ingress, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV13(out *jwriter.Writer, in IngressLoadBalancerStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Ingress) != 0 {
		const prefix string = ",\"ingress\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.Ingress {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV14(out, *v3)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV14(in *jlexer.Lexer, out *IngressLoadBalancerIngress) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hostname":
			out.Hostname = string(in.String())
		case "ip":
			out.IP = string(in.String())
		case "ports":
			if in.IsNull() {
				in.Skip()
				out.Ports = nil
			} else {
				in.Delim('[')
				if out.Ports == nil {
					if !in.IsDelim(']') {
						out.Ports = make([]*IngressPortStatus, 0, 8)
					} else {
						out.Ports = []*IngressPortStatus{}
					}
				} else {
					out.Ports = (out.Ports)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *IngressPortStatus
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(IngressPortStatus)
						}
						easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV15(in, v4)
					}
					out.Ports = append(out.Ports, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV14(out *jwriter.Writer, in IngressLoadBalancerIngress) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Hostname != "" {
		const prefix string = ",\"hostname\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Hostname))
	}
	if in.IP != "" {
		const prefix string = ",\"ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IP))
	}
	if len(in.Ports) != 0 {
		const prefix string = ",\"ports\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Ports {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV15(out, *v6)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV15(in *jlexer.Lexer, out *IngressPortStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			out.Error = string(in.String())
		case "port":
			if in.IsNull() {
				in.Skip()
				out.Port = nil
			} else {
				if out.Port == nil {
					out.Port = new(int32)
				}
				*out.Port = int32(in.Int32())
			}
		case "protocol":
			if in.IsNull() {
				in.Skip()
				out.Protocol = nil
			} else {
				if out.Protocol == nil {
					out.Protocol = new(string)
				}
				*out.Protocol = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV15(out *jwriter.Writer, in IngressPortStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Error != "" {
		const prefix string = ",\"error\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Error))
	}
	{
		const prefix string = ",\"port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Port == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.Port))
		}
	}
	{
		const prefix string = ",\"protocol\":"
		out.RawString(prefix)
		if in.Protocol == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Protocol))
		}
	}
	out.RawByte('}')
}
func easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV11(in *jlexer.Lexer, out *IngressSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "defaultBackend":
			if in.IsNull() {
				in.Skip()
				out.DefaultBackend = nil
			} else {
				if out.DefaultBackend == nil {
					out.DefaultBackend = new(IngressBackend)
				}
				easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV16(in, out.DefaultBackend)
			}
		case "ingressClassName":
			out.IngressClassName = string(in.String())
		case "rules":
			if in.IsNull() {
				in.Skip()
				out.Rules = nil
			} else {
				in.Delim('[')
				if out.Rules == nil {
					if !in.IsDelim(']') {
						out.Rules = make([]*IngressRule, 0, 8)
					} else {
						out.Rules = []*IngressRule{}
					}
				} else {
					out.Rules = (out.Rules)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *IngressRule
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(IngressRule)
						}
						easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV17(in, v7)
					}
					out.Rules = append(out.Rules, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tls":
			if in.IsNull() {
				in.Skip()
				out.TLS = nil
			} else {
				in.Delim('[')
				if out.TLS == nil {
					if !in.IsDelim(']') {
						out.TLS = make([]*IngressTLS, 0, 8)
					} else {
						out.TLS = []*IngressTLS{}
					}
				} else {
					out.TLS = (out.TLS)[:0]
				}
				for !in.IsDelim(']') {
					var v8 *IngressTLS
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(IngressTLS)
						}
						easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV18(in, v8)
					}
					out.TLS = append(out.TLS, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV11(out *jwriter.Writer, in IngressSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DefaultBackend != nil {
		const prefix string = ",\"defaultBackend\":"
		first = false
		out.RawString(prefix[1:])
		easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV16(out, *in.DefaultBackend)
	}
	if in.IngressClassName != "" {
		const prefix string = ",\"ingressClassName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IngressClassName))
	}
	if len(in.Rules) != 0 {
		const prefix string = ",\"rules\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.Rules {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil {
					out.RawString("null")
				} else {
					easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV17(out, *v10)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.TLS) != 0 {
		const prefix string = ",\"tls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.TLS {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV18(out, *v12)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV18(in *jlexer.Lexer, out *IngressTLS) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hosts":
			if in.IsNull() {
				in.Skip()
				out.Hosts = nil
			} else {
				in.Delim('[')
				if out.Hosts == nil {
					if !in.IsDelim(']') {
						out.Hosts = make([]string, 0, 4)
					} else {
						out.Hosts = []string{}
					}
				} else {
					out.Hosts = (out.Hosts)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.Hosts = append(out.Hosts, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "secretName":
			out.SecretName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV18(out *jwriter.Writer, in IngressTLS) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Hosts) != 0 {
		const prefix string = ",\"hosts\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v14, v15 := range in.Hosts {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	if in.SecretName != "" {
		const prefix string = ",\"secretName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SecretName))
	}
	out.RawByte('}')
}
func easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV17(in *jlexer.Lexer, out *IngressRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.Host = string(in.String())
		case "http":
			if in.IsNull() {
				in.Skip()
				out.HTTP = nil
			} else {
				if out.HTTP == nil {
					out.HTTP = new(HTTPIngressRuleValue)
				}
				(*out.HTTP).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV17(out *jwriter.Writer, in IngressRule) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Host != "" {
		const prefix string = ",\"host\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Host))
	}
	if in.HTTP != nil {
		const prefix string = ",\"http\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.HTTP).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV16(in *jlexer.Lexer, out *IngressBackend) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "resource":
			if in.IsNull() {
				in.Skip()
				out.Resource = nil
			} else {
				if out.Resource == nil {
					out.Resource = new(_v11.TypedLocalObjectReference)
				}
				(*out.Resource).UnmarshalEasyJSON(in)
			}
		case "service":
			if in.IsNull() {
				in.Skip()
				out.Service = nil
			} else {
				if out.Service == nil {
					out.Service = new(IngressServiceBackend)
				}
				easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV19(in, out.Service)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV16(out *jwriter.Writer, in IngressBackend) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Resource != nil {
		const prefix string = ",\"resource\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Resource).MarshalEasyJSON(out)
	}
	if in.Service != nil {
		const prefix string = ",\"service\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV19(out, *in.Service)
	}
	out.RawByte('}')
}
func easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV19(in *jlexer.Lexer, out *IngressServiceBackend) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "port":
			if in.IsNull() {
				in.Skip()
				out.Port = nil
			} else {
				if out.Port == nil {
					out.Port = new(ServiceBackendPort)
				}
				easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV110(in, out.Port)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV19(out *jwriter.Writer, in IngressServiceBackend) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	if in.Port != nil {
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV110(out, *in.Port)
	}
	out.RawByte('}')
}
func easyjson3281b84bDecodeGithubComKubewardenK8sObjectsApiNetworkingV110(in *jlexer.Lexer, out *ServiceBackendPort) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "number":
			out.Number = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3281b84bEncodeGithubComKubewardenK8sObjectsApiNetworkingV110(out *jwriter.Writer, in ServiceBackendPort) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Number != 0 {
		const prefix string = ",\"number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Number))
	}
	out.RawByte('}')
}
