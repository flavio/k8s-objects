// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA77018b0DecodeGithubComKubewardenK8sObjectsApiNetworkingV1(in *jlexer.Lexer, out *HTTPIngressPath) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "backend":
			if in.IsNull() {
				in.Skip()
				out.Backend = nil
			} else {
				if out.Backend == nil {
					out.Backend = new(IngressBackend)
				}
				easyjsonA77018b0DecodeGithubComKubewardenK8sObjectsApiNetworkingV11(in, out.Backend)
			}
		case "path":
			out.Path = string(in.String())
		case "pathType":
			if in.IsNull() {
				in.Skip()
				out.PathType = nil
			} else {
				if out.PathType == nil {
					out.PathType = new(string)
				}
				*out.PathType = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA77018b0EncodeGithubComKubewardenK8sObjectsApiNetworkingV1(out *jwriter.Writer, in HTTPIngressPath) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"backend\":"
		out.RawString(prefix[1:])
		if in.Backend == nil {
			out.RawString("null")
		} else {
			easyjsonA77018b0EncodeGithubComKubewardenK8sObjectsApiNetworkingV11(out, *in.Backend)
		}
	}
	if in.Path != "" {
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"pathType\":"
		out.RawString(prefix)
		if in.PathType == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.PathType))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HTTPIngressPath) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA77018b0EncodeGithubComKubewardenK8sObjectsApiNetworkingV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HTTPIngressPath) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA77018b0EncodeGithubComKubewardenK8sObjectsApiNetworkingV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HTTPIngressPath) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA77018b0DecodeGithubComKubewardenK8sObjectsApiNetworkingV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HTTPIngressPath) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA77018b0DecodeGithubComKubewardenK8sObjectsApiNetworkingV1(l, v)
}
func easyjsonA77018b0DecodeGithubComKubewardenK8sObjectsApiNetworkingV11(in *jlexer.Lexer, out *IngressBackend) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "resource":
			(out.Resource).UnmarshalEasyJSON(in)
		case "service":
			if in.IsNull() {
				in.Skip()
				out.Service = nil
			} else {
				if out.Service == nil {
					out.Service = new(IngressServiceBackend)
				}
				easyjsonA77018b0DecodeGithubComKubewardenK8sObjectsApiNetworkingV12(in, out.Service)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA77018b0EncodeGithubComKubewardenK8sObjectsApiNetworkingV11(out *jwriter.Writer, in IngressBackend) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"resource\":"
		first = false
		out.RawString(prefix[1:])
		(in.Resource).MarshalEasyJSON(out)
	}
	if in.Service != nil {
		const prefix string = ",\"service\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonA77018b0EncodeGithubComKubewardenK8sObjectsApiNetworkingV12(out, *in.Service)
	}
	out.RawByte('}')
}
func easyjsonA77018b0DecodeGithubComKubewardenK8sObjectsApiNetworkingV12(in *jlexer.Lexer, out *IngressServiceBackend) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "port":
			if in.IsNull() {
				in.Skip()
				out.Port = nil
			} else {
				if out.Port == nil {
					out.Port = new(ServiceBackendPort)
				}
				easyjsonA77018b0DecodeGithubComKubewardenK8sObjectsApiNetworkingV13(in, out.Port)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA77018b0EncodeGithubComKubewardenK8sObjectsApiNetworkingV12(out *jwriter.Writer, in IngressServiceBackend) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	if in.Port != nil {
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		easyjsonA77018b0EncodeGithubComKubewardenK8sObjectsApiNetworkingV13(out, *in.Port)
	}
	out.RawByte('}')
}
func easyjsonA77018b0DecodeGithubComKubewardenK8sObjectsApiNetworkingV13(in *jlexer.Lexer, out *ServiceBackendPort) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "number":
			out.Number = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA77018b0EncodeGithubComKubewardenK8sObjectsApiNetworkingV13(out *jwriter.Writer, in ServiceBackendPort) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Number != 0 {
		const prefix string = ",\"number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Number))
	}
	out.RawByte('}')
}
