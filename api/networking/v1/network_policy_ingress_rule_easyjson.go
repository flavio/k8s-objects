// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	_v1 "github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"
	intstr "github.com/kubewarden/k8s-objects/apimachinery/pkg/util/intstr"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEbc94a4aDecodeGithubComKubewardenK8sObjectsApiNetworkingV1(in *jlexer.Lexer, out *NetworkPolicyIngressRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				in.Delim('[')
				if out.From == nil {
					if !in.IsDelim(']') {
						out.From = make([]*NetworkPolicyPeer, 0, 8)
					} else {
						out.From = []*NetworkPolicyPeer{}
					}
				} else {
					out.From = (out.From)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *NetworkPolicyPeer
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(NetworkPolicyPeer)
						}
						easyjsonEbc94a4aDecodeGithubComKubewardenK8sObjectsApiNetworkingV11(in, v1)
					}
					out.From = append(out.From, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ports":
			if in.IsNull() {
				in.Skip()
				out.Ports = nil
			} else {
				in.Delim('[')
				if out.Ports == nil {
					if !in.IsDelim(']') {
						out.Ports = make([]*NetworkPolicyPort, 0, 8)
					} else {
						out.Ports = []*NetworkPolicyPort{}
					}
				} else {
					out.Ports = (out.Ports)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *NetworkPolicyPort
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(NetworkPolicyPort)
						}
						easyjsonEbc94a4aDecodeGithubComKubewardenK8sObjectsApiNetworkingV12(in, v2)
					}
					out.Ports = append(out.Ports, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEbc94a4aEncodeGithubComKubewardenK8sObjectsApiNetworkingV1(out *jwriter.Writer, in NetworkPolicyIngressRule) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.From) != 0 {
		const prefix string = ",\"from\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v3, v4 := range in.From {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					easyjsonEbc94a4aEncodeGithubComKubewardenK8sObjectsApiNetworkingV11(out, *v4)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Ports) != 0 {
		const prefix string = ",\"ports\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Ports {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					easyjsonEbc94a4aEncodeGithubComKubewardenK8sObjectsApiNetworkingV12(out, *v6)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NetworkPolicyIngressRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEbc94a4aEncodeGithubComKubewardenK8sObjectsApiNetworkingV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NetworkPolicyIngressRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEbc94a4aEncodeGithubComKubewardenK8sObjectsApiNetworkingV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NetworkPolicyIngressRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEbc94a4aDecodeGithubComKubewardenK8sObjectsApiNetworkingV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NetworkPolicyIngressRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEbc94a4aDecodeGithubComKubewardenK8sObjectsApiNetworkingV1(l, v)
}
func easyjsonEbc94a4aDecodeGithubComKubewardenK8sObjectsApiNetworkingV12(in *jlexer.Lexer, out *NetworkPolicyPort) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "endPort":
			out.EndPort = int32(in.Int32())
		case "port":
			if in.IsNull() {
				in.Skip()
				out.Port = nil
			} else {
				if out.Port == nil {
					out.Port = new(intstr.IntOrString)
				}
				*out.Port = intstr.IntOrString(in.String())
			}
		case "protocol":
			out.Protocol = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEbc94a4aEncodeGithubComKubewardenK8sObjectsApiNetworkingV12(out *jwriter.Writer, in NetworkPolicyPort) {
	out.RawByte('{')
	first := true
	_ = first
	if in.EndPort != 0 {
		const prefix string = ",\"endPort\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.EndPort))
	}
	if in.Port != nil {
		const prefix string = ",\"port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Port))
	}
	if in.Protocol != "" {
		const prefix string = ",\"protocol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Protocol))
	}
	out.RawByte('}')
}
func easyjsonEbc94a4aDecodeGithubComKubewardenK8sObjectsApiNetworkingV11(in *jlexer.Lexer, out *NetworkPolicyPeer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ipBlock":
			if in.IsNull() {
				in.Skip()
				out.IPBlock = nil
			} else {
				if out.IPBlock == nil {
					out.IPBlock = new(IPBlock)
				}
				(*out.IPBlock).UnmarshalEasyJSON(in)
			}
		case "namespaceSelector":
			if in.IsNull() {
				in.Skip()
				out.NamespaceSelector = nil
			} else {
				if out.NamespaceSelector == nil {
					out.NamespaceSelector = new(_v1.LabelSelector)
				}
				(*out.NamespaceSelector).UnmarshalEasyJSON(in)
			}
		case "podSelector":
			if in.IsNull() {
				in.Skip()
				out.PodSelector = nil
			} else {
				if out.PodSelector == nil {
					out.PodSelector = new(_v1.LabelSelector)
				}
				(*out.PodSelector).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEbc94a4aEncodeGithubComKubewardenK8sObjectsApiNetworkingV11(out *jwriter.Writer, in NetworkPolicyPeer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IPBlock != nil {
		const prefix string = ",\"ipBlock\":"
		first = false
		out.RawString(prefix[1:])
		(*in.IPBlock).MarshalEasyJSON(out)
	}
	if in.NamespaceSelector != nil {
		const prefix string = ",\"namespaceSelector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NamespaceSelector).MarshalEasyJSON(out)
	}
	if in.PodSelector != nil {
		const prefix string = ",\"podSelector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PodSelector).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
