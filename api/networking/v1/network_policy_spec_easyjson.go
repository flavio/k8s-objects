// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	_v1 "github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonFb0f9111DecodeGithubComKubewardenK8sObjectsApiNetworkingV1(in *jlexer.Lexer, out *NetworkPolicySpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "egress":
			if in.IsNull() {
				in.Skip()
				out.Egress = nil
			} else {
				in.Delim('[')
				if out.Egress == nil {
					if !in.IsDelim(']') {
						out.Egress = make([]*NetworkPolicyEgressRule, 0, 8)
					} else {
						out.Egress = []*NetworkPolicyEgressRule{}
					}
				} else {
					out.Egress = (out.Egress)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *NetworkPolicyEgressRule
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(NetworkPolicyEgressRule)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Egress = append(out.Egress, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ingress":
			if in.IsNull() {
				in.Skip()
				out.Ingress = nil
			} else {
				in.Delim('[')
				if out.Ingress == nil {
					if !in.IsDelim(']') {
						out.Ingress = make([]*NetworkPolicyIngressRule, 0, 8)
					} else {
						out.Ingress = []*NetworkPolicyIngressRule{}
					}
				} else {
					out.Ingress = (out.Ingress)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *NetworkPolicyIngressRule
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(NetworkPolicyIngressRule)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					out.Ingress = append(out.Ingress, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "podSelector":
			if in.IsNull() {
				in.Skip()
				out.PodSelector = nil
			} else {
				if out.PodSelector == nil {
					out.PodSelector = new(_v1.LabelSelector)
				}
				(*out.PodSelector).UnmarshalEasyJSON(in)
			}
		case "policyTypes":
			if in.IsNull() {
				in.Skip()
				out.PolicyTypes = nil
			} else {
				in.Delim('[')
				if out.PolicyTypes == nil {
					if !in.IsDelim(']') {
						out.PolicyTypes = make([]string, 0, 4)
					} else {
						out.PolicyTypes = []string{}
					}
				} else {
					out.PolicyTypes = (out.PolicyTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.PolicyTypes = append(out.PolicyTypes, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFb0f9111EncodeGithubComKubewardenK8sObjectsApiNetworkingV1(out *jwriter.Writer, in NetworkPolicySpec) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"egress\":"
		out.RawString(prefix[1:])
		if in.Egress == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Egress {
				if v4 > 0 {
					out.RawByte(',')
				}
				if v5 == nil {
					out.RawString("null")
				} else {
					(*v5).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ingress\":"
		out.RawString(prefix)
		if in.Ingress == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Ingress {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil {
					out.RawString("null")
				} else {
					(*v7).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"podSelector\":"
		out.RawString(prefix)
		if in.PodSelector == nil {
			out.RawString("null")
		} else {
			(*in.PodSelector).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"policyTypes\":"
		out.RawString(prefix)
		if in.PolicyTypes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.PolicyTypes {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NetworkPolicySpec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFb0f9111EncodeGithubComKubewardenK8sObjectsApiNetworkingV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NetworkPolicySpec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFb0f9111EncodeGithubComKubewardenK8sObjectsApiNetworkingV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NetworkPolicySpec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFb0f9111DecodeGithubComKubewardenK8sObjectsApiNetworkingV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NetworkPolicySpec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFb0f9111DecodeGithubComKubewardenK8sObjectsApiNetworkingV1(l, v)
}
