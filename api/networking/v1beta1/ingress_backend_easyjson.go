// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"
	intstr "github.com/kubewarden/k8s-objects/apimachinery/pkg/util/intstr"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA7b670ceDecodeGithubComKubewardenK8sObjectsApiNetworkingV1beta1(in *jlexer.Lexer, out *IngressBackend) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "serviceName":
			if in.IsNull() {
				in.Skip()
				out.ServiceName = nil
			} else {
				if out.ServiceName == nil {
					out.ServiceName = new(string)
				}
				*out.ServiceName = string(in.String())
			}
		case "servicePort":
			if in.IsNull() {
				in.Skip()
				out.ServicePort = nil
			} else {
				if out.ServicePort == nil {
					out.ServicePort = new(intstr.IntOrString)
				}
				*out.ServicePort = intstr.IntOrString(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA7b670ceEncodeGithubComKubewardenK8sObjectsApiNetworkingV1beta1(out *jwriter.Writer, in IngressBackend) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"serviceName\":"
		out.RawString(prefix[1:])
		if in.ServiceName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ServiceName))
		}
	}
	{
		const prefix string = ",\"servicePort\":"
		out.RawString(prefix)
		if in.ServicePort == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ServicePort))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IngressBackend) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA7b670ceEncodeGithubComKubewardenK8sObjectsApiNetworkingV1beta1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IngressBackend) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA7b670ceEncodeGithubComKubewardenK8sObjectsApiNetworkingV1beta1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IngressBackend) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA7b670ceDecodeGithubComKubewardenK8sObjectsApiNetworkingV1beta1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IngressBackend) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA7b670ceDecodeGithubComKubewardenK8sObjectsApiNetworkingV1beta1(l, v)
}
