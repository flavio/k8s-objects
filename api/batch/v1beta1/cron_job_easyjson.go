// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"
	_v1 "github.com/kubewarden/k8s-objects/api/core/v1"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA56f4d58DecodeGithubComKubewardenK8sObjectsApiBatchV1beta1(in *jlexer.Lexer, out *CronJob) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		case "spec":
			if in.IsNull() {
				in.Skip()
				out.Spec = nil
			} else {
				if out.Spec == nil {
					out.Spec = new(CronJobSpec)
				}
				easyjsonA56f4d58DecodeGithubComKubewardenK8sObjectsApiBatchV1beta11(in, out.Spec)
			}
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(CronJobStatus)
				}
				easyjsonA56f4d58DecodeGithubComKubewardenK8sObjectsApiBatchV1beta12(in, out.Status)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA56f4d58EncodeGithubComKubewardenK8sObjectsApiBatchV1beta1(out *jwriter.Writer, in CronJob) {
	out.RawByte('{')
	first := true
	_ = first
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if true {
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Metadata).MarshalEasyJSON(out)
	}
	if in.Spec != nil {
		const prefix string = ",\"spec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonA56f4d58EncodeGithubComKubewardenK8sObjectsApiBatchV1beta11(out, *in.Spec)
	}
	if in.Status != nil {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonA56f4d58EncodeGithubComKubewardenK8sObjectsApiBatchV1beta12(out, *in.Status)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CronJob) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA56f4d58EncodeGithubComKubewardenK8sObjectsApiBatchV1beta1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CronJob) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA56f4d58EncodeGithubComKubewardenK8sObjectsApiBatchV1beta1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CronJob) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA56f4d58DecodeGithubComKubewardenK8sObjectsApiBatchV1beta1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CronJob) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA56f4d58DecodeGithubComKubewardenK8sObjectsApiBatchV1beta1(l, v)
}
func easyjsonA56f4d58DecodeGithubComKubewardenK8sObjectsApiBatchV1beta12(in *jlexer.Lexer, out *CronJobStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "active":
			if in.IsNull() {
				in.Skip()
				out.Active = nil
			} else {
				in.Delim('[')
				if out.Active == nil {
					if !in.IsDelim(']') {
						out.Active = make([]_v1.ObjectReference, 0, 0)
					} else {
						out.Active = []_v1.ObjectReference{}
					}
				} else {
					out.Active = (out.Active)[:0]
				}
				for !in.IsDelim(']') {
					var v1 _v1.ObjectReference
					(v1).UnmarshalEasyJSON(in)
					out.Active = append(out.Active, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lastScheduleTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastScheduleTime).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA56f4d58EncodeGithubComKubewardenK8sObjectsApiBatchV1beta12(out *jwriter.Writer, in CronJobStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"active\":"
		out.RawString(prefix[1:])
		if in.Active == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Active {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"lastScheduleTime\":"
		out.RawString(prefix)
		out.Raw((in.LastScheduleTime).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonA56f4d58DecodeGithubComKubewardenK8sObjectsApiBatchV1beta11(in *jlexer.Lexer, out *CronJobSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "concurrencyPolicy":
			out.ConcurrencyPolicy = string(in.String())
		case "failedJobsHistoryLimit":
			out.FailedJobsHistoryLimit = int32(in.Int32())
		case "jobTemplate":
			if in.IsNull() {
				in.Skip()
				out.JobTemplate = nil
			} else {
				if out.JobTemplate == nil {
					out.JobTemplate = new(JobTemplateSpec)
				}
				easyjsonA56f4d58DecodeGithubComKubewardenK8sObjectsApiBatchV1beta13(in, out.JobTemplate)
			}
		case "schedule":
			if in.IsNull() {
				in.Skip()
				out.Schedule = nil
			} else {
				if out.Schedule == nil {
					out.Schedule = new(string)
				}
				*out.Schedule = string(in.String())
			}
		case "startingDeadlineSeconds":
			out.StartingDeadlineSeconds = int64(in.Int64())
		case "successfulJobsHistoryLimit":
			out.SuccessfulJobsHistoryLimit = int32(in.Int32())
		case "suspend":
			out.Suspend = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA56f4d58EncodeGithubComKubewardenK8sObjectsApiBatchV1beta11(out *jwriter.Writer, in CronJobSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ConcurrencyPolicy != "" {
		const prefix string = ",\"concurrencyPolicy\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ConcurrencyPolicy))
	}
	if in.FailedJobsHistoryLimit != 0 {
		const prefix string = ",\"failedJobsHistoryLimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.FailedJobsHistoryLimit))
	}
	{
		const prefix string = ",\"jobTemplate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.JobTemplate == nil {
			out.RawString("null")
		} else {
			easyjsonA56f4d58EncodeGithubComKubewardenK8sObjectsApiBatchV1beta13(out, *in.JobTemplate)
		}
	}
	{
		const prefix string = ",\"schedule\":"
		out.RawString(prefix)
		if in.Schedule == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Schedule))
		}
	}
	if in.StartingDeadlineSeconds != 0 {
		const prefix string = ",\"startingDeadlineSeconds\":"
		out.RawString(prefix)
		out.Int64(int64(in.StartingDeadlineSeconds))
	}
	if in.SuccessfulJobsHistoryLimit != 0 {
		const prefix string = ",\"successfulJobsHistoryLimit\":"
		out.RawString(prefix)
		out.Int32(int32(in.SuccessfulJobsHistoryLimit))
	}
	if in.Suspend {
		const prefix string = ",\"suspend\":"
		out.RawString(prefix)
		out.Bool(bool(in.Suspend))
	}
	out.RawByte('}')
}
func easyjsonA56f4d58DecodeGithubComKubewardenK8sObjectsApiBatchV1beta13(in *jlexer.Lexer, out *JobTemplateSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		case "spec":
			(out.Spec).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA56f4d58EncodeGithubComKubewardenK8sObjectsApiBatchV1beta13(out *jwriter.Writer, in JobTemplateSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"metadata\":"
		first = false
		out.RawString(prefix[1:])
		(in.Metadata).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"spec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Spec).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
