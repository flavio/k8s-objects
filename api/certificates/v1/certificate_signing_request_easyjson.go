// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	strfmt "github.com/go-openapi/strfmt"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3fec0a99DecodeGithubComKubewardenK8sObjectsApiCertificatesV1(in *jlexer.Lexer, out *CertificateSigningRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		case "spec":
			if in.IsNull() {
				in.Skip()
				out.Spec = nil
			} else {
				if out.Spec == nil {
					out.Spec = new(CertificateSigningRequestSpec)
				}
				easyjson3fec0a99DecodeGithubComKubewardenK8sObjectsApiCertificatesV11(in, out.Spec)
			}
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(CertificateSigningRequestStatus)
				}
				easyjson3fec0a99DecodeGithubComKubewardenK8sObjectsApiCertificatesV12(in, out.Status)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3fec0a99EncodeGithubComKubewardenK8sObjectsApiCertificatesV1(out *jwriter.Writer, in CertificateSigningRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if true {
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Metadata).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"spec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Spec == nil {
			out.RawString("null")
		} else {
			easyjson3fec0a99EncodeGithubComKubewardenK8sObjectsApiCertificatesV11(out, *in.Spec)
		}
	}
	if in.Status != nil {
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		easyjson3fec0a99EncodeGithubComKubewardenK8sObjectsApiCertificatesV12(out, *in.Status)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CertificateSigningRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3fec0a99EncodeGithubComKubewardenK8sObjectsApiCertificatesV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CertificateSigningRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3fec0a99EncodeGithubComKubewardenK8sObjectsApiCertificatesV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CertificateSigningRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3fec0a99DecodeGithubComKubewardenK8sObjectsApiCertificatesV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CertificateSigningRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3fec0a99DecodeGithubComKubewardenK8sObjectsApiCertificatesV1(l, v)
}
func easyjson3fec0a99DecodeGithubComKubewardenK8sObjectsApiCertificatesV12(in *jlexer.Lexer, out *CertificateSigningRequestStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "certificate":
			if in.IsNull() {
				in.Skip()
				out.Certificate = nil
			} else {
				out.Certificate = in.Bytes()
			}
		case "conditions":
			if in.IsNull() {
				in.Skip()
				out.Conditions = nil
			} else {
				in.Delim('[')
				if out.Conditions == nil {
					if !in.IsDelim(']') {
						out.Conditions = make([]*CertificateSigningRequestCondition, 0, 8)
					} else {
						out.Conditions = []*CertificateSigningRequestCondition{}
					}
				} else {
					out.Conditions = (out.Conditions)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *CertificateSigningRequestCondition
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(CertificateSigningRequestCondition)
						}
						easyjson3fec0a99DecodeGithubComKubewardenK8sObjectsApiCertificatesV13(in, v2)
					}
					out.Conditions = append(out.Conditions, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3fec0a99EncodeGithubComKubewardenK8sObjectsApiCertificatesV12(out *jwriter.Writer, in CertificateSigningRequestStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Certificate) != 0 {
		const prefix string = ",\"certificate\":"
		first = false
		out.RawString(prefix[1:])
		out.Base64Bytes(in.Certificate)
	}
	{
		const prefix string = ",\"conditions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Conditions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Conditions {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					easyjson3fec0a99EncodeGithubComKubewardenK8sObjectsApiCertificatesV13(out, *v6)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson3fec0a99DecodeGithubComKubewardenK8sObjectsApiCertificatesV13(in *jlexer.Lexer, out *CertificateSigningRequestCondition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lastTransitionTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastTransitionTime).UnmarshalJSON(data))
			}
		case "lastUpdateTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastUpdateTime).UnmarshalJSON(data))
			}
		case "message":
			out.Message = string(in.String())
		case "reason":
			out.Reason = string(in.String())
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(string)
				}
				*out.Status = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3fec0a99EncodeGithubComKubewardenK8sObjectsApiCertificatesV13(out *jwriter.Writer, in CertificateSigningRequestCondition) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"lastTransitionTime\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.LastTransitionTime).MarshalJSON())
	}
	if true {
		const prefix string = ",\"lastUpdateTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.LastUpdateTime).MarshalJSON())
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	if in.Reason != "" {
		const prefix string = ",\"reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Status == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Status))
		}
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		if in.Type == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Type))
		}
	}
	out.RawByte('}')
}
func easyjson3fec0a99DecodeGithubComKubewardenK8sObjectsApiCertificatesV11(in *jlexer.Lexer, out *CertificateSigningRequestSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "extra":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Extra = make(map[string][]string)
				} else {
					out.Extra = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 []string
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						in.Delim('[')
						if v7 == nil {
							if !in.IsDelim(']') {
								v7 = make([]string, 0, 4)
							} else {
								v7 = []string{}
							}
						} else {
							v7 = (v7)[:0]
						}
						for !in.IsDelim(']') {
							var v8 string
							v8 = string(in.String())
							v7 = append(v7, v8)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Extra)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]string, 0, 4)
					} else {
						out.Groups = []string{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.Groups = append(out.Groups, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "request":
			if in.IsNull() {
				in.Skip()
				out.Request = nil
			} else {
				if out.Request == nil {
					out.Request = new(strfmt.Base64)
				}
				if in.IsNull() {
					in.Skip()
					*out.Request = nil
				} else {
					*out.Request = in.Bytes()
				}
			}
		case "signerName":
			if in.IsNull() {
				in.Skip()
				out.SignerName = nil
			} else {
				if out.SignerName == nil {
					out.SignerName = new(string)
				}
				*out.SignerName = string(in.String())
			}
		case "uid":
			out.UID = string(in.String())
		case "usages":
			if in.IsNull() {
				in.Skip()
				out.Usages = nil
			} else {
				in.Delim('[')
				if out.Usages == nil {
					if !in.IsDelim(']') {
						out.Usages = make([]string, 0, 4)
					} else {
						out.Usages = []string{}
					}
				} else {
					out.Usages = (out.Usages)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.Usages = append(out.Usages, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3fec0a99EncodeGithubComKubewardenK8sObjectsApiCertificatesV11(out *jwriter.Writer, in CertificateSigningRequestSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Extra) != 0 {
		const prefix string = ",\"extra\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.Extra {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				if v12Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v13, v14 := range v12Value {
						if v13 > 0 {
							out.RawByte(',')
						}
						out.String(string(v14))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Groups == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Groups {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"request\":"
		out.RawString(prefix)
		if in.Request == nil {
			out.RawString("null")
		} else {
			out.Base64Bytes(*in.Request)
		}
	}
	{
		const prefix string = ",\"signerName\":"
		out.RawString(prefix)
		if in.SignerName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.SignerName))
		}
	}
	if in.UID != "" {
		const prefix string = ",\"uid\":"
		out.RawString(prefix)
		out.String(string(in.UID))
	}
	{
		const prefix string = ",\"usages\":"
		out.RawString(prefix)
		if in.Usages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.Usages {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.String(string(v20))
			}
			out.RawByte(']')
		}
	}
	if in.Username != "" {
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	out.RawByte('}')
}
