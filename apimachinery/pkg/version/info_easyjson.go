// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package version

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDdc53814DecodeGithubComKubewardenK8sObjectsApimachineryPkgVersion(in *jlexer.Lexer, out *Info) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "buildDate":
			if in.IsNull() {
				in.Skip()
				out.BuildDate = nil
			} else {
				if out.BuildDate == nil {
					out.BuildDate = new(string)
				}
				*out.BuildDate = string(in.String())
			}
		case "compiler":
			if in.IsNull() {
				in.Skip()
				out.Compiler = nil
			} else {
				if out.Compiler == nil {
					out.Compiler = new(string)
				}
				*out.Compiler = string(in.String())
			}
		case "gitCommit":
			if in.IsNull() {
				in.Skip()
				out.GitCommit = nil
			} else {
				if out.GitCommit == nil {
					out.GitCommit = new(string)
				}
				*out.GitCommit = string(in.String())
			}
		case "gitTreeState":
			if in.IsNull() {
				in.Skip()
				out.GitTreeState = nil
			} else {
				if out.GitTreeState == nil {
					out.GitTreeState = new(string)
				}
				*out.GitTreeState = string(in.String())
			}
		case "gitVersion":
			if in.IsNull() {
				in.Skip()
				out.GitVersion = nil
			} else {
				if out.GitVersion == nil {
					out.GitVersion = new(string)
				}
				*out.GitVersion = string(in.String())
			}
		case "goVersion":
			if in.IsNull() {
				in.Skip()
				out.GoVersion = nil
			} else {
				if out.GoVersion == nil {
					out.GoVersion = new(string)
				}
				*out.GoVersion = string(in.String())
			}
		case "major":
			if in.IsNull() {
				in.Skip()
				out.Major = nil
			} else {
				if out.Major == nil {
					out.Major = new(string)
				}
				*out.Major = string(in.String())
			}
		case "minor":
			if in.IsNull() {
				in.Skip()
				out.Minor = nil
			} else {
				if out.Minor == nil {
					out.Minor = new(string)
				}
				*out.Minor = string(in.String())
			}
		case "platform":
			if in.IsNull() {
				in.Skip()
				out.Platform = nil
			} else {
				if out.Platform == nil {
					out.Platform = new(string)
				}
				*out.Platform = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc53814EncodeGithubComKubewardenK8sObjectsApimachineryPkgVersion(out *jwriter.Writer, in Info) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"buildDate\":"
		out.RawString(prefix[1:])
		if in.BuildDate == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.BuildDate))
		}
	}
	{
		const prefix string = ",\"compiler\":"
		out.RawString(prefix)
		if in.Compiler == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Compiler))
		}
	}
	{
		const prefix string = ",\"gitCommit\":"
		out.RawString(prefix)
		if in.GitCommit == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.GitCommit))
		}
	}
	{
		const prefix string = ",\"gitTreeState\":"
		out.RawString(prefix)
		if in.GitTreeState == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.GitTreeState))
		}
	}
	{
		const prefix string = ",\"gitVersion\":"
		out.RawString(prefix)
		if in.GitVersion == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.GitVersion))
		}
	}
	{
		const prefix string = ",\"goVersion\":"
		out.RawString(prefix)
		if in.GoVersion == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.GoVersion))
		}
	}
	{
		const prefix string = ",\"major\":"
		out.RawString(prefix)
		if in.Major == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Major))
		}
	}
	{
		const prefix string = ",\"minor\":"
		out.RawString(prefix)
		if in.Minor == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Minor))
		}
	}
	{
		const prefix string = ",\"platform\":"
		out.RawString(prefix)
		if in.Platform == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Platform))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Info) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdc53814EncodeGithubComKubewardenK8sObjectsApimachineryPkgVersion(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Info) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc53814EncodeGithubComKubewardenK8sObjectsApimachineryPkgVersion(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Info) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdc53814DecodeGithubComKubewardenK8sObjectsApimachineryPkgVersion(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Info) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc53814DecodeGithubComKubewardenK8sObjectsApimachineryPkgVersion(l, v)
}
